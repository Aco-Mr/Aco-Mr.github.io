<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot集成Redisson</title>
      <link href="posts/1d400328.html"/>
      <url>posts/1d400328.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot集成Redisson"><a href="#SpringBoot集成Redisson" class="headerlink" title="SpringBoot集成Redisson"></a>SpringBoot集成Redisson</h1><h2 id="一、导入依赖包"><a href="#一、导入依赖包" class="headerlink" title="一、导入依赖包"></a>一、导入依赖包</h2><pre class="line-numbers language-pom" data-language="pom"><code class="language-pom">&lt;!--redisson--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.redisson&lt;/groupId&gt;&lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;&lt;version&gt;${redisson.version}&lt;/version&gt;&lt;/dependency&gt;&lt;!--redis--&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;groupId&gt;io.lettuce&lt;/groupId&gt;                &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;            &lt;/exclusion&gt;       &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;redis.clients&lt;/groupId&gt;    &lt;artifactId&gt;jedis&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">mode</span><span class="token punctuation">:</span> single <span class="token comment"># cluster集群 sentinel哨兵</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span><span class="token comment">#    password: xxx</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment"># 连接超时时间（毫秒）</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment"># 连接池最大连接数（使用负值表示没有限制）</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 连接池中的最大空闲连接</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 连接池中的最小空闲连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配置文件读取"><a href="#三、配置文件读取" class="headerlink" title="三、配置文件读取"></a>三、配置文件读取</h2><h3 id="RedisProperties"><a href="#RedisProperties" class="headerlink" title="RedisProperties"></a>RedisProperties</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"spring.redis"</span><span class="token punctuation">,</span>ignoreInvalidFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> database<span class="token punctuation">;</span>    <span class="token comment">/**     * 等待节点回复命令的时间。该时间从命令发送成功时开始计时     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mode<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token comment">/**     * 单机信息配置     */</span>    <span class="token keyword">private</span> <span class="token class-name">RedisSingleProperties</span> single<span class="token punctuation">;</span>    <span class="token comment">/**     * 集群 信息配置     */</span>    <span class="token keyword">private</span> <span class="token class-name">RedisClusterProperties</span> cluster<span class="token punctuation">;</span>    <span class="token comment">/**     * 哨兵配置     */</span>    <span class="token keyword">private</span> <span class="token class-name">RedisSentinelProperties</span> sentinel<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RedisPoolProperties"><a href="#RedisPoolProperties" class="headerlink" title="RedisPoolProperties"></a>RedisPoolProperties</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 池配置 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.redis.jedis.pool"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisPoolProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxActive<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxWait<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> connTimeout<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> soTimeout<span class="token punctuation">;</span>    <span class="token comment">/**     * 池大小     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RedisClusterProperties"><a href="#RedisClusterProperties" class="headerlink" title="RedisClusterProperties"></a>RedisClusterProperties</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisClusterProperties</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 集群状态扫描间隔时间，单位是毫秒     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> scanInterval<span class="token punctuation">;</span>    <span class="token comment">/**     * 集群节点     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nodes<span class="token punctuation">;</span>    <span class="token comment">/**     * 默认值： SLAVE（只在从服务节点里读取）设置读取操作选择节点的模式。 可用值为： SLAVE - 只在从服务节点里读取。     * MASTER - 只在主服务节点里读取。 MASTER_SLAVE - 在主从服务节点里都可以读取     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> readMode<span class="token punctuation">;</span>    <span class="token comment">/**     * （从节点连接池大小） 默认值：64     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> slaveConnectionPoolSize<span class="token punctuation">;</span>    <span class="token comment">/**     * 主节点连接池大小）默认值：64     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> masterConnectionPoolSize<span class="token punctuation">;</span>    <span class="token comment">/**     * （命令失败重试次数） 默认值：3     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> retryAttempts<span class="token punctuation">;</span>    <span class="token comment">/**     *命令重试发送时间间隔，单位：毫秒 默认值：1500     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> retryInterval<span class="token punctuation">;</span>    <span class="token comment">/**     * 执行失败最大次数默认值：3     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> failedAttempts<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RedisSentinelProperties"><a href="#RedisSentinelProperties" class="headerlink" title="RedisSentinelProperties"></a>RedisSentinelProperties</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSentinelProperties</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 哨兵master 名称     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> master<span class="token punctuation">;</span>    <span class="token comment">/**     * 哨兵节点     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nodes<span class="token punctuation">;</span>    <span class="token comment">/**     * 哨兵配置     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> masterOnlyWrite<span class="token punctuation">;</span>    <span class="token comment">/**     *     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> failMax<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加载配置"><a href="#加载配置" class="headerlink" title="加载配置"></a>加载配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">RedisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RedisPoolProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">RedisProperties</span> redisProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">RedisPoolProperties</span> redisPoolProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnExpression</span><span class="token punctuation">(</span><span class="token string">"'${spring.redis.mode}'=='single' or '${spring.redis.mode}'=='cluster' or '${spring.redis.mode}'=='sentinel'"</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">class</span> <span class="token class-name">RedissonSingleClientConfiguration</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * 单机模式 redisson 客户端         */</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.redis.mode"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"single"</span><span class="token punctuation">)</span>        <span class="token class-name">RedissonClient</span> <span class="token function">redissonSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"single redisProperties:{}"</span><span class="token punctuation">,</span> <span class="token class-name">JsonUtil</span><span class="token punctuation">.</span><span class="token function">convertObj2String</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> address <span class="token operator">=</span> <span class="token string">"redis://"</span> <span class="token operator">+</span> redisProperties<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> redisProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SingleServerConfig</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setConnectionPoolSize</span><span class="token punctuation">(</span>redisPoolProperties<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setConnectionMinimumIdleSize</span><span class="token punctuation">(</span>redisPoolProperties<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                serverConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * 集群模式的 redisson 客户端         *         * @return         */</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.redis.mode"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"cluster"</span><span class="token punctuation">)</span>        <span class="token class-name">RedissonClient</span> <span class="token function">redissonCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cluster redisProperties:{}"</span><span class="token punctuation">,</span>redisProperties<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> redisProperties<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> newNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                    index<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"redis://"</span><span class="token punctuation">)</span> <span class="token operator">?</span> index <span class="token operator">:</span> <span class="token string">"redis://"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ClusterServersConfig</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useClusterServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addNodeAddress</span><span class="token punctuation">(</span>newNodes<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setScanInterval</span><span class="token punctuation">(</span>                            redisProperties<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScanInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setIdleConnectionTimeout</span><span class="token punctuation">(</span>                            redisPoolProperties<span class="token punctuation">.</span><span class="token function">getSoTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>                            redisPoolProperties<span class="token punctuation">.</span><span class="token function">getConnTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//                    .setFailedAttempts(</span><span class="token comment">//                            redisProperties.getCluster().getFailedAttempts())</span>                    <span class="token punctuation">.</span><span class="token function">setRetryAttempts</span><span class="token punctuation">(</span>                            redisProperties<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRetryAttempts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setRetryInterval</span><span class="token punctuation">(</span>                            redisProperties<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRetryInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setMasterConnectionPoolSize</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">getMasterConnectionPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSlaveConnectionPoolSize</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">getSlaveConnectionPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                serverConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * 哨兵模式 redisson 客户端         * @return         */</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.redis.mode"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"sentinel"</span><span class="token punctuation">)</span>        <span class="token class-name">RedissonClient</span> <span class="token function">redissonSentinel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"sentinel redisProperties:{}"</span><span class="token punctuation">,</span>redisProperties<span class="token punctuation">.</span><span class="token function">getSentinel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> redisProperties<span class="token punctuation">.</span><span class="token function">getSentinel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> newNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> newNodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>                    index<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"redis://"</span><span class="token punctuation">)</span> <span class="token operator">?</span> index <span class="token operator">:</span> <span class="token string">"redis://"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SentinelServersConfig</span> serverConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useSentinelServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addSentinelAddress</span><span class="token punctuation">(</span>newNodes<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setMasterName</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getSentinel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setReadMode</span><span class="token punctuation">(</span><span class="token class-name">ReadMode</span><span class="token punctuation">.</span>SLAVE<span class="token punctuation">)</span><span class="token comment">//                    .setFailedAttempts(redisProperties.getSentinel().getFailMax())</span>                    <span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setMasterConnectionPoolSize</span><span class="token punctuation">(</span>redisPoolProperties<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSlaveConnectionPoolSize</span><span class="token punctuation">(</span>redisPoolProperties<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                serverConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：阿里云服务器搭的redis会拒绝redisson底层netty密码访问，若无密码则可以正常访问</strong></p><h2 id="四、工具类"><a href="#四、工具类" class="headerlink" title="四、工具类"></a>四、工具类</h2><h3 id="DistributedLocker"><a href="#DistributedLocker" class="headerlink" title="DistributedLocker"></a>DistributedLocker</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DistributedLocker</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取锁，如果锁不可用，则当前线程处于休眠状态，直到获得锁为止。     *     * @param lockKey     */</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 释放锁     *     * @param lockKey     */</span>    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 带超时的锁: 超过加锁时间后自动解锁     *     * @param lockKey     * @param timeout : 秒     */</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 带超时的锁: 超过加锁时间后自动解锁     *     * @param lockKey     * @param unit     * @param timeout     */</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 尝试获取锁，获取到立即返回true,未获取到立即返回false     *     * @param lockKey     * @return     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 尝试获取锁，在等待时间内获取到锁则返回true,否则返回false,如果获取到锁，则要么执行完后程序释放锁，     * 要么在给定的超时时间leaseTime后释放锁     * @param lockKey     * @param waitTime     * @param leaseTime     * @param unit     * @return     */</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 锁是否被任意一个线程锁持有     *     * @param lockKey     * @return     */</span>    <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RedisDistributedLocker"><a href="#RedisDistributedLocker" class="headerlink" title="RedisDistributedLocker"></a>RedisDistributedLocker</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisDistributedLocker</span> <span class="token keyword">implements</span> <span class="token class-name">DistributedLocker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">RedissonLocker</span><span class="token punctuation">(</span><span class="token class-name">RedissonClient</span> redissonClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redissonClient <span class="token operator">=</span> redissonClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token keyword">int</span> leaseTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span>                           <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">{</span>        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RLock</span> lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RedissonLockUtil"><a href="#RedissonLockUtil" class="headerlink" title="RedissonLockUtil"></a>RedissonLockUtil</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonLockUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DistributedLocker</span> locker<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RedissonLockUtil</span><span class="token punctuation">(</span><span class="token class-name">DistributedLocker</span> locker<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">RedissonLockUtil</span><span class="token punctuation">.</span>locker <span class="token operator">=</span> locker<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 加锁     * @param lockKey     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RLock</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> distributedLocker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 释放锁     * @param lockKey     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        distributedLocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 释放锁     * @param lock     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">RLock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        distributedLocker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 带超时的锁     * @param lockKey     * @param timeout 超时时间   单位：秒     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RLock</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> distributedLocker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 带超时的锁     * @param lockKey     * @param unit 时间单位     * @param timeout 超时时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RLock</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> distributedLocker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 尝试获取锁     * @param lockKey     * @param waitTime 最多等待时间     * @param leaseTime 上锁后自动释放锁时间     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token keyword">int</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">int</span> leaseTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> distributedLocker<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 尝试获取锁     * @param lockKey     * @param unit 时间单位     * @param waitTime 最多等待时间     * @param leaseTime 上锁后自动释放锁时间     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">int</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">int</span> leaseTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> distributedLocker<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：使用redisson锁时，若设置了过期时间，redisson的watch dog会失效</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成Redis</title>
      <link href="posts/f677ab49.html"/>
      <url>posts/f677ab49.html</url>
      
        <content type="html"><![CDATA[<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis-reactive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 1.5的版本默认采用的连接池技术是jedis  2.0以上版本默认连接池是lettuce, 在这里采用jedis，所以需要排除lettuce的jar --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 将作为Redis对象序列化器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><pre class="line-numbers language-none"><code class="language-none">#配置缓存redis  spring.redis.database=8  # Redis服务器地址  spring.redis.host=127.0.0.1  # Redis服务器连接端口  spring.redis.port=6379  # Redis服务器连接密码（默认为空）  spring.redis.password=  # 连接池最大连接数（使用负值表示没有限制）  spring.redis.pool.max-active=8  # 连接池最大阻塞等待时间（使用负值表示没有限制）  spring.redis.pool.max-wait=-1  # 连接池中的最大空闲连接  spring.redis.pool.max-idle=8  # 连接池中的最小空闲连接  spring.redis.pool.min-idle=0  # 连接超时时间（毫秒）  spring.redis.keytimeout=1000  spring.redis.timeout=0  # 逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1 spring.redis.pool.time-berween-eviction-runs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RedisTemplate配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 核心配置就是配置 值的序列化方法     *     * @param factory     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FastJsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objectFastJsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//        自定义的RedisTemplate</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置key的序列化方法</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 核心的设置   1.2.36版本自动提供</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>objectFastJsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//        对hash的序列化操作设置</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>objectFastJsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//        注册到工程类</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">valueOperations</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">hashOperations</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ListOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">listOperations</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">setOperations</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ZSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">zSetOperations</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从同步实战</title>
      <link href="posts/f7b1a35f.html"/>
      <url>posts/f7b1a35f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows10启动多MySQL服务"><a href="#Windows10启动多MySQL服务" class="headerlink" title="Windows10启动多MySQL服务"></a>Windows10启动多MySQL服务</h1><h2 id="1、将安装的MySQL复制一份"><a href="#1、将安装的MySQL复制一份" class="headerlink" title="1、将安装的MySQL复制一份"></a>1、将安装的MySQL复制一份</h2><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1696685086485-cd7e57df-5271-4f67-9bf1-6be3d97968ce.png#averageHue=%23fcfbf9&amp;clientId=u740f60bd-2a1e-4&amp;from=paste&amp;height=90&amp;id=uad528406&amp;originHeight=112&amp;originWidth=294&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=3333&amp;status=done&amp;style=none&amp;taskId=u160296e4-f414-42e2-8577-5600777e80f&amp;title=&amp;width=235.2" alt="image.png"></p><h2 id="2、修改MySQL的my-ini文件"><a href="#2、修改MySQL的my-ini文件" class="headerlink" title="2、修改MySQL的my.ini文件"></a>2、修改MySQL的my.ini文件</h2><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1696685174663-4f689758-35be-40ab-a6e5-b0500ba24bfe.png#averageHue=%23fbfaf8&amp;clientId=u740f60bd-2a1e-4&amp;from=paste&amp;height=142&amp;id=u3b8591f1&amp;originHeight=177&amp;originWidth=479&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=11907&amp;status=done&amp;style=none&amp;taskId=u96acc3f3-f861-4f1c-9fd5-8444a729330&amp;title=&amp;width=383.2" alt="image.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment"># 设置3307端口</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">3307</span><span class="token comment"># 安装mysql的路径</span><span class="token assign-left variable">basedir</span><span class="token operator">=</span>E:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL3307<span class="token comment"># mysql的数据存放目录</span><span class="token assign-left variable">datadir</span><span class="token operator">=</span>E:<span class="token punctuation">\</span>ProgramData<span class="token punctuation">\</span>MySQL<span class="token punctuation">\</span>MySQL3307<span class="token punctuation">\</span>data<span class="token comment"># 允许最大连接数</span><span class="token assign-left variable">max_connections</span><span class="token operator">=</span><span class="token number">200</span><span class="token comment"># 允许连接失败的次数。</span><span class="token assign-left variable">max_connect_errors</span><span class="token operator">=</span><span class="token number">10</span>character-set-server<span class="token operator">=</span>utf8<span class="token comment"># 默认存储引擎</span>default-storage-engine<span class="token operator">=</span>INNODB<span class="token comment">#mysql_native_password</span><span class="token assign-left variable">default_authentication_plugin</span><span class="token operator">=</span>mysql_native_password<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token comment"># 设置mysql客户端默认字符集</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">3307</span>default-character-set<span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：若安装时是自定义路径，得在自定义的路径下找到ProgramData文件才能找到my.ini和data文件</strong></p><h2 id="3、删除data文件"><a href="#3、删除data文件" class="headerlink" title="3、删除data文件"></a>3、删除data文件</h2><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1696685359374-8c9b6e59-b984-4ae1-b590-89937ad6f25b.png#averageHue=%23fcf9f8&amp;clientId=u740f60bd-2a1e-4&amp;from=paste&amp;height=154&amp;id=ucae083b6&amp;originHeight=193&amp;originWidth=302&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=7214&amp;status=done&amp;style=none&amp;taskId=ube9ad25b-96d4-4466-8037-e0fd2885776&amp;title=&amp;width=241.6" alt="image.png"></p><h2 id="4、注册服务"><a href="#4、注册服务" class="headerlink" title="4、注册服务"></a>4、注册服务</h2><h3 id="1-初始化复制的MySQL"><a href="#1-初始化复制的MySQL" class="headerlink" title="(1) 初始化复制的MySQL"></a>(1) 初始化复制的MySQL</h3><p><strong>进入MySQL3307的bin目录下打开cmd</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqld <span class="token function">install</span> MySQL3307 --defaults-file<span class="token operator">=</span><span class="token string">"E:\ProgramData\MySQL\MySQL3307\my.ini"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1696685489748-d0b9afa5-2a3a-4961-a9e2-9eb97d4a1395.png#averageHue=%23151311&amp;clientId=u740f60bd-2a1e-4&amp;from=paste&amp;height=42&amp;id=u5d3651b4&amp;originHeight=52&amp;originWidth=1187&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=8075&amp;status=done&amp;style=none&amp;taskId=u77c7c2b1-482c-4bce-ac4a-a16f97d11b8&amp;title=&amp;width=949.6" alt="image.png"></p><h3 id="2-初始化数据库"><a href="#2-初始化数据库" class="headerlink" title="(2) 初始化数据库"></a>(2) 初始化数据库</h3><p><strong>在MySQL3307的bin目录输入</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqld --initialize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-初始化数据库"><a href="#3-初始化数据库" class="headerlink" title="(3) 初始化数据库"></a>(3) 初始化数据库</h3><p><strong>初始化完成之后MySQL3307的data目录下就会生成一个data文件，找到.err文件打开，这就是生成好的临时密码</strong><br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1696685659602-8cfee34e-8ad3-45b5-bac1-73a3a12cc159.png#averageHue=%23f9f7f5&amp;clientId=u740f60bd-2a1e-4&amp;from=paste&amp;height=408&amp;id=u32a8f6b7&amp;originHeight=510&amp;originWidth=516&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=48866&amp;status=done&amp;style=none&amp;taskId=uafb81be2-8629-4801-8a50-a10a3e1e578&amp;title=&amp;width=412.8" alt="image.png"><br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1696685683360-e7c9e4b0-ff58-4268-8f4e-d2cf984b7038.png#averageHue=%23313129&amp;clientId=u740f60bd-2a1e-4&amp;from=paste&amp;height=377&amp;id=uf61a2fd2&amp;originHeight=471&amp;originWidth=1632&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=114084&amp;status=done&amp;style=none&amp;taskId=u164dc532-7fda-4ee1-9867-ee5f2a6e305&amp;title=&amp;width=1305.6" alt="image.png"></p><h3 id="4-启动数据库"><a href="#4-启动数据库" class="headerlink" title="(4) 启动数据库"></a>(4) 启动数据库</h3><p><strong>启动命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net start MySQL3307<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5、进入数据库"><a href="#5、进入数据库" class="headerlink" title="5、进入数据库"></a>5、进入数据库</h2><h3 id="1-登录"><a href="#1-登录" class="headerlink" title="(1) 登录"></a>(1) 登录</h3><p><strong>在MySQL的bin目录下进入cmd，再将临时密码输入</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -P3307 -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-修改密码"><a href="#2-修改密码" class="headerlink" title="(2) 修改密码"></a><strong>(2) 修改密码</strong></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'新密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Mysql实现主从复制"><a href="#Mysql实现主从复制" class="headerlink" title="Mysql实现主从复制"></a>Mysql实现主从复制</h1><h2 id="1、修改主数据库的my-ini配置文件"><a href="#1、修改主数据库的my-ini配置文件" class="headerlink" title="1、修改主数据库的my.ini配置文件"></a>1、修改主数据库的my.ini配置文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># **** 主从同步配置 ****</span><span class="token comment"># 设置优先级，主必须小于从，必须唯一</span>server-id<span class="token operator">=</span><span class="token number">1</span><span class="token comment"># bin log文件前缀</span>log-bin<span class="token operator">=</span><span class="token string">"SC-201910302109-bin"</span><span class="token assign-left variable">binlog_do_db</span><span class="token operator">=</span>jdbc    <span class="token comment">#待同步的数据库日志</span><span class="token comment"># 不需要同步的数据库</span><span class="token assign-left variable">binlog_ignore_db</span><span class="token operator">=</span>information_schema<span class="token assign-left variable">binlog_ignore_db</span><span class="token operator">=</span>mysql<span class="token assign-left variable">binlog_ignore_db</span><span class="token operator">=</span>performance_schema<span class="token assign-left variable">binlog_ignore_db</span><span class="token operator">=</span>test<span class="token comment"># 设置 binlog日志格式 STATEMENT, ROW, MIXED</span><span class="token assign-left variable">binlog_format</span><span class="token operator">=</span>mixed<span class="token comment"># 设置一个 binlog 文件的最大字节</span><span class="token comment"># 设置最大 100MB</span><span class="token assign-left variable">max_binlog_size</span><span class="token operator">=</span><span class="token number">104857600</span><span class="token comment"># 设置了 binlog 文件的有效期（单位：天）</span>expire_logs_days <span class="token operator">=</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改后启动或重启主数据库</strong></p><h2 id="2、修改从数据库的my-ini配置文件"><a href="#2、修改从数据库的my-ini配置文件" class="headerlink" title="2、修改从数据库的my.ini配置文件"></a>2、修改从数据库的my.ini配置文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># **** 主从同步配置 ****</span>server-id<span class="token operator">=</span><span class="token number">202</span>    <span class="token comment">#服务器 id，随意，但要唯一</span>log-bin<span class="token operator">=</span>mysql-bin   <span class="token comment">#二进制文件存放路径</span><span class="token comment"># 只读模式</span><span class="token assign-left variable">read_only</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 需要同步的数据库</span><span class="token assign-left variable">replicate_do_db</span><span class="token operator">=</span>jdbc<span class="token comment"># 设定需要复制的表</span><span class="token comment"># replicate_do_table=jdbc.tab1</span><span class="token comment"># 设定需要忽略的复制表</span><span class="token comment"># replicate_ignore_table=jdbc.tab2</span><span class="token comment"># 增加通配符的两个配置</span><span class="token comment"># replicate_wild_do_table=jdbc.%   只复制哪个库的哪个表</span><span class="token comment"># replicate_wild_ignore_table=jdbc.%   忽略哪个库的哪个表</span><span class="token comment"># replicate_do_table 跟 replicate_wild_do_table 一样，只不过replicate_wild_do_table可以加通配符</span><span class="token comment"># replicate_ignore_table 跟 replicate_wild_ignore_table 一样，只不过replicate_wild_ignore_table可以加通配符</span><span class="token comment">#不同步的数据库</span>binlog-ignore-db<span class="token operator">=</span>mysqlbinlog-ignore-db<span class="token operator">=</span>information_schemabinlog-ignore-db<span class="token operator">=</span>performance_schema  <span class="token comment"># 不需要同步的数据库</span><span class="token assign-left variable">replicate_ignore_db</span><span class="token operator">=</span>information_schema<span class="token assign-left variable">replicate_ignore_db</span><span class="token operator">=</span>mysql<span class="token assign-left variable">replicate_ignore_db</span><span class="token operator">=</span>performance_schema<span class="token assign-left variable">binlog_cache_size</span><span class="token operator">=</span>1M<span class="token comment">##主从复制的混合模式</span><span class="token comment">#binlog_format=mixed</span><span class="token comment">#忽略主键重复的错误</span><span class="token comment">#slave_skip_errors=1062</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改后启动或重启从数据库</strong></p><h2 id="3、配置主从数据库同步"><a href="#3、配置主从数据库同步" class="headerlink" title="3、配置主从数据库同步"></a>3、配置主从数据库同步</h2><p><strong>注意：MySQL提供的主从同步机制中，从库是读取主库的binlog日志进行同步操作的，因此，主库开启同步之前的数据从库是无法读取的，只能把主库的数据dump下来进行人工对从库进行数据同步操作。</strong></p><h3 id="1-主库创建同步账户并授权"><a href="#1-主库创建同步账户并授权" class="headerlink" title="(1) 主库创建同步账户并授权"></a>(1) 主库创建同步账户并授权</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 方式一</span><span class="token comment">-- 创建用户</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'aco'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token comment">-- 授权</span><span class="token keyword">GRANT</span> <span class="token keyword">REPLICATION</span> SLAVE <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'aco'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span class="token comment">-- 刷新权限</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token comment">-- 方式二</span><span class="token comment">-- 创建并授权</span><span class="token keyword">grant</span> <span class="token keyword">replication</span> slave<span class="token punctuation">,</span><span class="token keyword">replication</span> client <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'aco'</span><span class="token variable">@'127.0.0.1'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment">-- 刷新权限</span>FLUSH <span class="token keyword">PRIVILEGES</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-上读锁，进行锁库操作，防止同步时主库被写入数据"><a href="#2-上读锁，进行锁库操作，防止同步时主库被写入数据" class="headerlink" title="(2) 上读锁，进行锁库操作，防止同步时主库被写入数据"></a>(2) 上读锁，进行锁库操作，防止同步时主库被写入数据</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 锁库，只能读</span>FLUSH <span class="token keyword">TABLES</span> <span class="token keyword">WITH</span> <span class="token keyword">READ</span> <span class="token keyword">LOCK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-查看主库信息并记录相关字段"><a href="#3-查看主库信息并记录相关字段" class="headerlink" title="(3) 查看主库信息并记录相关字段"></a>(3) 查看主库信息并记录相关字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查看状态</span><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token comment">-- 查询结果</span><span class="token operator">|</span> <span class="token keyword">File</span>                      <span class="token operator">|</span> Position<span class="token operator">|</span> SC<span class="token operator">-</span><span class="token number">201910302109</span><span class="token operator">-</span>bin<span class="token punctuation">.</span><span class="token number">000043</span><span class="token operator">|</span> <span class="token number">1026</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-从库开启同步命令"><a href="#4-从库开启同步命令" class="headerlink" title="(4) 从库开启同步命令"></a>(4) 从库开启同步命令</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 关闭从库</span>stop slave<span class="token punctuation">;</span><span class="token comment">-- 设置同步，注意这里是主库ip，日志名称和位置是我们之前上图中看到的名称和位置</span>change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token comment">-- 主库ip地址</span>master_user<span class="token operator">=</span><span class="token string">'aco'</span><span class="token punctuation">,</span> <span class="token comment">-- 主库的用户账号</span>master_password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token comment">-- 主库的用户密码</span>master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> <span class="token comment">-- 主库的端口</span>master_log_file<span class="token operator">=</span><span class="token string">'SC-201910302109-bin.000043'</span><span class="token punctuation">,</span> <span class="token comment">-- 查询主库状态信息的File字段</span>master_log_pos<span class="token operator">=</span><span class="token number">1026</span><span class="token punctuation">;</span> <span class="token comment">-- 查询主库状态信息的Position字段</span><span class="token comment">-- 重置从库</span>reset slave<span class="token comment">-- 开启从库</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span> <span class="token comment">-- 检查服务器状态</span><span class="token keyword">show</span> slave <span class="token keyword">status</span><span class="token comment">-- 查询结果这两个字段都为yes则开启成功</span><span class="token operator">|</span> Slave_IO_Running <span class="token operator">|</span>Slave_SQL_Running<span class="token operator">|</span> Yes             <span class="token operator">|</span>  Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-恢复主库读锁状态"><a href="#5-恢复主库读锁状态" class="headerlink" title="(5) 恢复主库读锁状态"></a>(5) 恢复主库读锁状态</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 解锁</span><span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4、踩坑"><a href="#4、踩坑" class="headerlink" title="4、踩坑"></a>4、踩坑</h2><h3 id="1-报错ERROR-1819-HY000-Your-password-does-not-satisfy-the-current-policy-requirements"><a href="#1-报错ERROR-1819-HY000-Your-password-does-not-satisfy-the-current-policy-requirements" class="headerlink" title="(1) 报错ERROR 1819 (HY000): Your password does not satisfy the current policy requirements"></a>(1) 报错ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</h3><h4 id="原因"><a href="#原因" class="headerlink" title="- 原因"></a>- 原因</h4><p>密码设置的太简单，不符合mysql密码设置规范</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="- 解决方法"></a>- 解决方法</h4><p>1、查看mysql完整的密码规则<br>show variables like ‘validate_password%’;<br><strong>注意：若显示为Empty set, 1 warning(0.00 sec) 则需要安装validate_password插件。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/** 安装插件 **/</span>mysql<span class="token operator">&gt;</span> INSTALL COMPONENT <span class="token string">'file://component_validate_password'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.10</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'validate_password%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------------------+--------+</span><span class="token operator">|</span> Variable_name                        <span class="token operator">|</span> <span class="token keyword">Value</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------------------+--------+</span><span class="token operator">|</span> validate_password<span class="token punctuation">.</span>check_user_name    <span class="token operator">|</span> <span class="token keyword">ON</span>     <span class="token operator">|</span><span class="token operator">|</span> validate_password<span class="token punctuation">.</span>dictionary_file    <span class="token operator">|</span>        <span class="token operator">|</span><span class="token operator">|</span> validate_password<span class="token punctuation">.</span>length             <span class="token operator">|</span> <span class="token number">8</span>      <span class="token operator">|</span><span class="token operator">|</span> validate_password<span class="token punctuation">.</span>mixed_case_count   <span class="token operator">|</span> <span class="token number">1</span>      <span class="token operator">|</span><span class="token operator">|</span> validate_password<span class="token punctuation">.</span>number_count       <span class="token operator">|</span> <span class="token number">1</span>      <span class="token operator">|</span><span class="token operator">|</span> validate_password<span class="token punctuation">.</span>policy             <span class="token operator">|</span> MEDIUM <span class="token operator">|</span><span class="token operator">|</span> validate_password<span class="token punctuation">.</span>special_char_count <span class="token operator">|</span> <span class="token number">1</span>      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------------------+--------+</span><span class="token number">7</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、更改密码长度<br>set global validate_password_length=4;</p><p>3、设置密码验证策略(medium【中】,low【低】)<br>set global validate_password_policy=0;</p><h3 id="2-主从同步的加密方式不一致问题"><a href="#2-主从同步的加密方式不一致问题" class="headerlink" title="(2) 主从同步的加密方式不一致问题"></a>(2) 主从同步的加密方式不一致问题</h3><h4 id="报错信息-error-connecting-to-master-‘-109-x79-115-x71-108-x40-x31-57-x32-x2e-49-x36-56-x2e-50-56-46-51-3306’-retry-time-60-retries-1-message-Authentication-plugin-‘caching-sha2-password’-reported-error-Authentication-requires-secure-connection"><a href="#报错信息-error-connecting-to-master-‘-109-x79-115-x71-108-x40-x31-57-x32-x2e-49-x36-56-x2e-50-56-46-51-3306’-retry-time-60-retries-1-message-Authentication-plugin-‘caching-sha2-password’-reported-error-Authentication-requires-secure-connection" class="headerlink" title="报错信息:error connecting to master ‘mysql@192.168.28.3:3306’ - retry-time: 60 retries: 1 message: Authentication plugin ‘caching_sha2_password’ reported error: Authentication requires secure connection."></a>报错信息:error connecting to master ‘<a href="mailto:mysql@192.168.28.3">mysql@192.168.28.3</a>:3306’ - retry-time: 60 retries: 1 message: Authentication plugin ‘caching_sha2_password’ reported error: Authentication requires secure connection.</h4><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="- 原因"></a>- 原因</h4><p><strong>加密方式和解密方式不一致，需要修改密码加密规则</strong></p><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="- 解决方法"></a>- 解决方法</h4><p><strong>修改主库账号密码规则</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改用户的密码策略</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'aco'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="MySQL实现读写分离"><a href="#MySQL实现读写分离" class="headerlink" title="MySQL实现读写分离"></a>MySQL实现读写分离</h2><h3 id="1、读库创建账户"><a href="#1、读库创建账户" class="headerlink" title="1、读库创建账户"></a>1、读库创建账户</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建用户</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'aco_slave'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、授权用户只读权限"><a href="#2、授权用户只读权限" class="headerlink" title="2、授权用户只读权限"></a>2、授权用户只读权限</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 授权</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'aco_slave'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3、刷新权限"><a href="#3、刷新权限" class="headerlink" title="3、刷新权限"></a>3、刷新权限</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 刷新权限</span>FLUSH <span class="token keyword">PRIVILEGES</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、登录只读用户进入数据库校验"><a href="#4、登录只读用户进入数据库校验" class="headerlink" title="4、登录只读用户进入数据库校验"></a>4、登录只读用户进入数据库校验</h3><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1697031372591-26df2259-c38f-4160-a587-db868d7bd07d.png#averageHue=%23f6f6f6&amp;clientId=u4f77dca7-6c5d-4&amp;from=paste&amp;height=200&amp;id=u1085dee4&amp;originHeight=250&amp;originWidth=382&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=10445&amp;status=done&amp;style=none&amp;taskId=u4eded760-dbe2-4302-808f-dc5eb519b6b&amp;title=&amp;width=305.6" alt="image.png"><br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1697031345300-7ad0c994-9ed5-442d-9762-1b7f0172b0d0.png#averageHue=%23faf9f9&amp;clientId=u4f77dca7-6c5d-4&amp;from=paste&amp;height=116&amp;id=ua07c734c&amp;originHeight=145&amp;originWidth=737&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=8520&amp;status=done&amp;style=none&amp;taskId=u5fd54cd5-9f8b-4321-aee3-d14bee29f21&amp;title=&amp;width=589.6" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot多数据源实战</title>
      <link href="posts/d5cfb348.html"/>
      <url>posts/d5cfb348.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、项目版本"><a href="#一、项目版本" class="headerlink" title="一、项目版本"></a>一、项目版本</h2><p>springboot：2.6.12<br>mybatis-plus：3.5.1</p><h2 id="二、yaml文件的数据库配置"><a href="#二、yaml文件的数据库配置" class="headerlink" title="二、yaml文件的数据库配置"></a>二、yaml文件的数据库配置</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">master</span><span class="token punctuation">:</span> <span class="token comment"># 主数据库</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.0.101<span class="token punctuation">:</span>3306/found_things<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;userSSL=false</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> ENC(CJozzWULCUDwwhrqb7zU/w==)      <span class="token key atrule">password</span><span class="token punctuation">:</span> ENC(enec1T3Ux5QgtWz6ZYUprQ==)    <span class="token key atrule">slave</span><span class="token punctuation">:</span> <span class="token comment"># 从数据库</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.0.101<span class="token punctuation">:</span>3307/found_things<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;userSSL=false</span>      <span class="token key atrule">username</span><span class="token punctuation">:</span> ENC(TBij4ppJ6kFhr0m2cygferc2MLp9NQ+3)      <span class="token key atrule">password</span><span class="token punctuation">:</span> ENC(8bioAnjOY0+YC34EilIUZg==)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配置文件"><a href="#三、配置文件" class="headerlink" title="三、配置文件"></a>三、配置文件</h2><h3 id="1、主数据源配置文件"><a href="#1、主数据源配置文件" class="headerlink" title="1、主数据源配置文件"></a>1、主数据源配置文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>aco<span class="token punctuation">.</span>foundThingsSearch<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MybatisConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span><span class="token class-name">HikariDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableTransactionManagement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token comment">/** * master 数据源配置 * @author A.co * @version 1.0 * @date 2023/10/12 10:40 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.aco.foundThingsSearch.mapper.master"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> sqlSessionTemplateRef <span class="token operator">=</span> <span class="token string">"masterSqlSessionTemplate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MasterDatasourceConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 创建数据源     *     * @return DataSource     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"masterDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.master"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">masterDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建工厂     *     * @param dataSource 数据源     * @return 工厂     * @throws IOException 异常     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"masterSqlSessionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"masterDataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">MybatisSqlSessionFactoryBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置数据源bean</span>        bean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath:mapper/master/*.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置mapper文件路径</span>        <span class="token class-name">MybatisConfiguration</span> mybatisConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mybatisConfiguration<span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setConfiguration</span><span class="token punctuation">(</span>mybatisConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建事务     *     * @param dataSource 数据源     * @return 事务     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"masterTransactionManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">dataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"masterDataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建模板     *     * @param sqlSessionFactory 工厂     * @return 模板     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"masterSqlSessionTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionTemplate</span> <span class="token function">sqlSessionTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"masterSqlSessionFactory"</span><span class="token punctuation">)</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、从数据源配置文件"><a href="#2、从数据源配置文件" class="headerlink" title="2、从数据源配置文件"></a>2、从数据源配置文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>aco<span class="token punctuation">.</span>foundThingsSearch<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">MybatisConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span><span class="token class-name">HikariDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span></span><span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableTransactionManagement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token comment">/** * slave 数据源配置 * @author A.co * @version 1.0 * @date 2023/10/12 10:40 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.aco.foundThingsSearch.mapper.slave"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> sqlSessionTemplateRef <span class="token operator">=</span> <span class="token string">"slaveSqlSessionTemplate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlaveDatasourceConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 创建数据源     *     * @return DataSource     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"slaveDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.slave"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">masterDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">HikariDataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建工厂     *     * @param dataSource 数据源     * @return 工厂     * @throws IOException 异常     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"slaveSqlSessionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"slaveDataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">MybatisSqlSessionFactoryBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置数据源bean</span>        bean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath:mapper/slave/*.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置mapper文件路径</span>        <span class="token class-name">MybatisConfiguration</span> mybatisConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mybatisConfiguration<span class="token punctuation">.</span><span class="token function">setMapUnderscoreToCamelCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setConfiguration</span><span class="token punctuation">(</span>mybatisConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建事务     *     * @param dataSource 数据源     * @return 事务     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"slaveTransactionManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">dataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"slaveDataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建模板     *     * @param sqlSessionFactory 工厂     * @return 模板     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"slaveSqlSessionTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionTemplate</span> <span class="token function">sqlSessionTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"slaveSqlSessionFactory"</span><span class="token punctuation">)</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、踩坑"><a href="#四、踩坑" class="headerlink" title="四、踩坑"></a>四、踩坑</h2><h3 id="1、报错：Cause-java-lang-IllegalArgumentException-jdbcUrl-is-required-with-driverClassName"><a href="#1、报错：Cause-java-lang-IllegalArgumentException-jdbcUrl-is-required-with-driverClassName" class="headerlink" title="1、报错：Cause: java.lang.IllegalArgumentException: jdbcUrl is required with driverClassName."></a>1、报错：Cause: java.lang.IllegalArgumentException: jdbcUrl is required with driverClassName.</h3><h3 id="原因"><a href="#原因" class="headerlink" title="- 原因"></a>- 原因</h3><ol><li>spring.datasource.url 是数据库的 JDBC URL</li><li>spring.datasource.jdbc-url 是用来重写自定义连接池<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="- 解决方法"></a>- 解决方法</h3>将spring.datasource.前缀.url 修改为 spring.datasource.前缀.jdbc-url</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL原理及优化实战</title>
      <link href="posts/c6d084e0.html"/>
      <url>posts/c6d084e0.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、索引的概述"><a href="#一、索引的概述" class="headerlink" title="一、索引的概述"></a>一、索引的概述</h1><h2 id="1-为什么要使用索引"><a href="#1-为什么要使用索引" class="headerlink" title="1.为什么要使用索引"></a>1.为什么要使用索引</h2><p>在海量数据中心进行查询某条记录的场景是经常发生的，那么如何提升性能，就跟要查询的数据字段是否有索引关系。如果字段加了索引，那么查询的性能就非常快！</p><ul><li>索引为什么快？</li><li>索引到底是什么？</li><li>在使用索引时要注意什么样的事项？<h2 id="2-索引是什么"><a href="#2-索引是什么" class="headerlink" title="2.索引是什么"></a>2.索引是什么</h2>查字典的方式？“数”shu - - 通过目录来查，能够快速的定位到目标数据所在的页码。<br>没有使用索引的时候，数据的查询需要进行多次IO读写，这样的性能较差- -全表扫描的过程。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027042809-03f1c2d3-f709-46b1-923e-a14d37395d91.png#averageHue=%23f7f7f7&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=394&amp;id=uec67f83f&amp;originHeight=493&amp;originWidth=959&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=103965&amp;status=done&amp;style=none&amp;taskId=uc9042627-60aa-40b2-bef4-2e31a8f3754&amp;title=&amp;width=767.2" alt="image.png"></li></ul><p>为数据库的某个字段创建索引，相当于是为这个字段的内容创建了一个目录。通过这个目录可以快速的实现数据的定位，也就是通过索引能够快速的找到某条数据所在磁盘的位置。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027056830-b45e0459-160e-4711-bd67-5c6be67354e4.png#averageHue=%23f7f7f7&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=247&amp;id=u2649799c&amp;originHeight=309&amp;originWidth=950&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=98604&amp;status=done&amp;style=none&amp;taskId=u4d75e36b-189b-45ff-8e51-1f62917099a&amp;title=&amp;width=760" alt="image.png"></p><p>现在的疑问？</p><ul><li>索引存放位置</li><li>索引的分类及如何创建</li><li>索引使用了哪种数据结构：各种数据结构的查询性能进行分析<h2 id="3-索引存放的位置"><a href="#3-索引存放的位置" class="headerlink" title="3.索引存放的位置"></a>3.索引存放的位置</h2></li></ul><p>对于mac系统在/usr/local/mysql文件夹中，对于Win系统c:/programdata/mysql(隐藏文件夹)</p><ul><li><p>InnoDB的存储引擎的表：将索引和数据存放在同一个文件里。(为什么？有什么优势？) &nbsp;<em><em>文件后缀：</em>.ibd</em>*</p></li><li><p>MyISAM存储引擎的表：索引和数据分开两个文件来存储。索引文件后缀：*.MYI; &nbsp;数据文件后缀：MYD</p><h2 id="4-索引的分类"><a href="#4-索引的分类" class="headerlink" title="4.索引的分类"></a>4.索引的分类</h2></li><li><p>主键索引：主键自带索引效果，也就意味着通过主键来查询表中的记录，性能是非常好的。</p></li><li><p>普通索引：为普通列创建的索引。</p></li></ul><p>创建索引的命令:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 格式</span><span class="token keyword">create</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token comment">#例子</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_name <span class="token keyword">on</span> employess<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>唯一索引：就像是唯一列，列中的数据是唯一的。比普通索引的性能要好。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#格式</span><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token comment">#例子</span><span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> idx_unique_name <span class="token keyword">on</span> employess<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>联合索引(组合索引)：一次性为表中的多个字段一起创建索引，最左前缀法则(如何命中联合索引中的索引列)。注意：一个联合索引建议不要超过5个列。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#格式</span><span class="token keyword">create</span> <span class="token keyword">index</span> 索引名称 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>列<span class="token number">1</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">,</span>列<span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#例子</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_name_age_position <span class="token keyword">on</span> employess<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>全文索引</p></li></ul><p>进行查询的时候，数据源可能来自于不同的字段或者不同的表。比如去百度中查询数据，千峰教育，来自于网页的标题或者网页的内容。MyISAM存储引擎支持全文索引。在实际生产环境中，并不会使用MyISAM存储引擎的全文索引功能来实现全文查找。而是会使用第三方的搜索引擎中间件，比如ElasticSearch(用的最多)、Solr。</p><h1 id="二、索引使用的数据结构"><a href="#二、索引使用的数据结构" class="headerlink" title="二、索引使用的数据结构"></a>二、索引使用的数据结构</h1><p>使用索引查找数据性能很快，避免了全表扫描的多次磁盘IO读写。但是我们发现，使用索引实际上也需要在索引中查找数据，而且数据量是一样的，那么凭什么索引就能快呢？这就跟索引使用了哪种数据结构支持快速查找。<br>什么叫数据结构：存放数据的结构。比如：数组、链表、栈、堆、队列等等这些概念。</p><h2 id="1-线性表"><a href="#1-线性表" class="headerlink" title="1.线性表"></a>1.线性表</h2><p>线性的维护数据顺序。<br>对于线性表来说，有两种数据结构来支撑：</p><ul><li>线性顺序表：相邻两个数据逻辑关系和物理位置是相同的。</li><li>线性链式表：相邻两个数据的逻辑关系和物理存放位置没有关系。数据是有先后的逻辑关系，但是数据的物理存储位置并不连续。 <ul><li>单向链表：能够通过当前结点找到下一个节点的位置，以此来维护链表的逻辑关系 <ul><li>结点结构：数据内容- 下一个数据的指针</li></ul></li><li>双向链表：能够通过当前结点找到上一个或下一个节点的位置，双向都可以找。 <ul><li>结点结构：上一个数据的指针+数据内容+下一个数据的指针</li></ul></li></ul></li></ul><p>顺序表和链式表的区别：</p><ul><li><p> 数组：进行数据的查询性能(可以通过数组的索引/下标) &nbsp;时间复杂度(比较次数)/空间复杂度(算法需要使用多少个变量空间)<br>        数组的查询性能非常好：时间复杂度是O(1) — 比较1次。<br>        数组的增删性能是非常差的 </p></li><li><p> 链表：查询的性能是非常差的：时间复杂度是O(n)—n表示查第几个则需要比较几次。<br>        增删性能是非常好的 </p><h2 id="2-栈、队列、串、广义表"><a href="#2-栈、队列、串、广义表" class="headerlink" title="2.栈、队列、串、广义表"></a>2.栈、队列、串、广义表</h2></li><li><p>栈：先进后出，有顺序栈、链式栈</p></li><li><p>队列：先进先出，有顺序队列、链式队列</p></li><li><p>串：Stirng定长串、StringBuffer/StringBuilder动态串</p></li><li><p>广义表：更加灵活的多维数组，可以在不同的元素中创建不同的维度的数组。</p><h2 id="3-树"><a href="#3-树" class="headerlink" title="3.树"></a>3.树</h2><p>二叉查找树的查找性能是明显比线性表的性能要好，那么接下来我们就要学习这么几种：</p><h3 id="1）多叉数"><a href="#1）多叉数" class="headerlink" title="1）多叉数"></a>1）多叉数</h3><p>非二叉数</p><h3 id="2）二叉数"><a href="#2）二叉数" class="headerlink" title="2）二叉数"></a>2）二叉数</h3><p>一个节点最多只能延后2个子节点，可以是0、1、2子节点。</p><h3 id="3）二叉查找数"><a href="#3）二叉查找数" class="headerlink" title="3）二叉查找数"></a>3）二叉查找数</h3><p>二叉查找树的查找性能是ok的，查询性能跟树的高度有关，树的高度又跟你插入数据的顺序有关系。特点：二叉树的根节点的数值是比所有左子树的节点的数值大，比右子树的节点的数值小。这样的规律同样满足于他的所有子树。</p><h3 id="4）平衡二叉树-理想概念的树"><a href="#4）平衡二叉树-理想概念的树" class="headerlink" title="4）平衡二叉树(理想概念的树)"></a>4）平衡二叉树(理想概念的树)</h3><p>我们知道二叉查找树不能非常智能的维护树的高度，因此二叉查找树在某些情况下查询性能是不ok的，此时平衡二叉树就出现了。</p></li><li><p>特点：平衡二叉树中的树及其子树都应满足：左子树和右子树的深度差都不能超过1</p></li></ul><p>如果平衡二叉树不满足这个特点，那么平衡二叉树要进行自己旋转，如何自己旋转：<br>    左旋、右旋、双向(先左后右、先右后左)</p><h3 id="5-红黑树-平衡二叉树的一种体现"><a href="#5-红黑树-平衡二叉树的一种体现" class="headerlink" title="5)红黑树(平衡二叉树的一种体现)"></a>5)红黑树(平衡二叉树的一种体现)</h3><p>平衡二叉树为了维护树的平衡，在一旦不满足平衡的情况就要进行自旋，但是自旋会造成一定的系统开销。因此红黑树在自旋造成的系统开销和减少查询次数之间做了权衡。因此红黑树有时候并不是一颗平衡二叉树。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027264690-64f8e14a-c4f7-4d1e-a10d-1bcd13b861af.png#averageHue=%23f6f4f4&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=218&amp;id=u1f5778da&amp;originHeight=272&amp;originWidth=494&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=31778&amp;status=done&amp;style=none&amp;taskId=u4b962a9a-9e9d-4454-8f8d-3b52992b0d3&amp;title=&amp;width=395.2" alt="image.png"><br>红黑树已经是在查询性能上得到了优化，但索引依然没有使用红黑树作为数据结构，因为红黑树在每一层上存放的数据内容是有限的，导致数据量一大，树的深度就变得非常大，于是查询性能非常差。因此索引没有使用红黑树。</p><h3 id="6-B树"><a href="#6-B树" class="headerlink" title="6)B树"></a>6)B树</h3><p>B树允许一个节点存放多个数据。这样可以使更小的树的深度来存放更多的数据。但是，B树的一个节点中到底能存放多少个数据，决定了树的深度。<br>通过数值计算，B树的一个节点最多只能存放15个数据，因此B树依然不能满足海量数据的查询性能优化。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027280135-65e9aa41-8ab9-4bda-89e3-ddfcc12fced4.png#averageHue=%23fafafa&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=289&amp;id=ufa4edaf0&amp;originHeight=361&amp;originWidth=927&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=132448&amp;status=done&amp;style=none&amp;taskId=u7deacd90-7a69-42e4-a9dc-b6a6ca22085&amp;title=&amp;width=741.6" alt="image.png"></p><h3 id="7-B-树"><a href="#7-B-树" class="headerlink" title="7)B+树"></a>7)B+树</h3><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027289843-a0e5d586-fb2c-4d19-85df-8f6f230bfdf6.png#averageHue=%23fefefe&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=287&amp;id=u70b4c8c0&amp;originHeight=359&amp;originWidth=902&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=93954&amp;status=done&amp;style=none&amp;taskId=ube050f40-7091-46db-becb-3ec9c96fe41&amp;title=&amp;width=721.6" alt="image.png"></p><ul><li>B+树的特点： <ul><li>非叶子节点冗余了叶子节点中的键。</li><li>叶子节点是从小到大、从左到右排列的</li><li>叶子节点之间提供了指针，提高了区间访问的性能</li><li>只有叶子节点存放数据，非叶子节点是不存放数据的，只存放键</li></ul></li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027297239-4bb5c37f-7e56-4e6f-a82a-8e0c5d5ef3f5.png#averageHue=%23f7f7f7&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=346&amp;id=uf18a95eb&amp;originHeight=433&amp;originWidth=944&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=177230&amp;status=done&amp;style=none&amp;taskId=ue94ee723-e456-4c15-a289-3f6ce6b4862&amp;title=&amp;width=755.2" alt="image.png"><br></p><h3 id="8）哈希表"><a href="#8）哈希表" class="headerlink" title="8）哈希表"></a>8）哈希表</h3><p>使用哈希表来存取数据的性能是最快的，O(1),但是不支持范围查找(区间访问)</p><h1 id="三、InnoDB和MyISAM的区别"><a href="#三、InnoDB和MyISAM的区别" class="headerlink" title="三、InnoDB和MyISAM的区别"></a>三、InnoDB和MyISAM的区别</h1><p>InnoDB和MyISAM都是数据库表的存储引擎。那么在互联网公司，或者追求查询性能的场景下，都会使用InnoDB作为表的存储引擎。<br>为什么？</p><h2 id="1-InnoDB引擎"><a href="#1-InnoDB引擎" class="headerlink" title="1.InnoDB引擎"></a>1.InnoDB引擎</h2><p>把索引和数据存放在一个文件中，通过找到索引后就能直接在索引树上的叶子节点中获取完整的数据。——聚集索引<br>可以实现行锁/表锁<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027312988-4f9399a2-0240-449a-b263-cf366c8c25af.png#averageHue=%23fafafa&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=250&amp;id=uce830c3d&amp;originHeight=313&amp;originWidth=938&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=97175&amp;status=done&amp;style=none&amp;taskId=u1a840ba1-566d-46d5-b199-6bef72aa38c&amp;title=&amp;width=750.4" alt="image.png"><br></p><h2 id="2-MyISAM存储引擎"><a href="#2-MyISAM存储引擎" class="headerlink" title="2.MyISAM存储引擎"></a>2.MyISAM存储引擎</h2><p>把索引和数据存放在两个文件中，查找到索引后还要去另外一个文件中找数据，性能会慢一些。——非聚集索引<br>除此之外，MyISAM天然支持表锁，而且支持全文索引。</p><h1 id="四、索引常见的面试题"><a href="#四、索引常见的面试题" class="headerlink" title="四、索引常见的面试题"></a>四、索引常见的面试题</h1><h2 id="1-问题一：为什么非主键索引的叶子节点存放的数据是主键值"><a href="#1-问题一：为什么非主键索引的叶子节点存放的数据是主键值" class="headerlink" title="1.问题一：为什么非主键索引的叶子节点存放的数据是主键值"></a>1.问题一：为什么非主键索引的叶子节点存放的数据是主键值</h2><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027329741-e67aec8a-f1d6-4065-b4f4-f1fabc28d2cd.png#averageHue=%23f9f9f9&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=250&amp;id=u5045633f&amp;originHeight=312&amp;originWidth=946&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=110176&amp;status=done&amp;style=none&amp;taskId=ua410e3de-3d27-48b4-b3e9-2ed3b9b5eb9&amp;title=&amp;width=756.8" alt="image.png"></p><p>如果普通索引中不存放主键，而存放完整数据，那么就会造成：</p><ul><li><p>数据冗余，虽然提升了查询性能，但是需要更多的空间来存放冗余的数据</p></li><li><p>维护麻烦：一个地方修改数据，需要在多棵索引树上修改</p><h2 id="2-问题二：为什么InnoDB表必须创建主键"><a href="#2-问题二：为什么InnoDB表必须创建主键" class="headerlink" title="2.问题二：为什么InnoDB表必须创建主键"></a>2.问题二：为什么InnoDB表必须创建主键</h2><p>创建InnoDB表不使用主键能创建成功吗？如果能创建成功，能不能为这张表的普通列创建索引？<br>如果没有主键，MySQL优化器会给一个虚拟的主键，于是普通索引会使用这个虚拟主键——也会造成性能开销。为了性能考虑，和设计初衷，那么创建表的时候就应该创建主键。</p><h2 id="3-问题三：为什么使用主键时推荐使用整型的自增主键"><a href="#3-问题三：为什么使用主键时推荐使用整型的自增主键" class="headerlink" title="3.问题三：为什么使用主键时推荐使用整型的自增主键"></a>3.问题三：为什么使用主键时推荐使用整型的自增主键</h2><h3 id="1）为什么要使用整型"><a href="#1）为什么要使用整型" class="headerlink" title="1）为什么要使用整型"></a>1）为什么要使用整型</h3><p>主键-主键索引树-树里的叶子节点和非叶子节点的键存放的键是主键的值，而且这棵树是一个二叉查找树。数据的存放是有大小顺序的。</p></li><li><p>整型：大小顺序是很好比较的。</p></li><li><p>字符串：字符串的自然顺序的比较是要进行一次编码成为数值后再进行比较的。(字符串的自然顺序，AZ)</p></li></ul><p>UUID随机字符串</p><h3 id="2）为什么要自增"><a href="#2）为什么要自增" class="headerlink" title="2）为什么要自增"></a>2）为什么要自增</h3><p>如果不用自增： (10 &nbsp; 1 &nbsp; &nbsp;6 &nbsp; 200 &nbsp;18 &nbsp; 29) 使用不规律的整数来作为主键，那么主键索引树会使用更多的自旋次数来保证树索引，树的叶子节点中的数据是从小到大–从左到右排列，因此性能必然比使用了自增主键的性能要差！</p><h1 id="五、联合索引和最左前缀法则"><a href="#五、联合索引和最左前缀法则" class="headerlink" title="五、联合索引和最左前缀法则"></a>五、联合索引和最左前缀法则</h1><h2 id="1-联合索引的特点"><a href="#1-联合索引的特点" class="headerlink" title="1.联合索引的特点"></a>1.联合索引的特点</h2><p>在使用一个索引来实现多个表中字段的索引效果。</p><h2 id="2-联合索引是如何存储的"><a href="#2-联合索引是如何存储的" class="headerlink" title="2.联合索引是如何存储的"></a>2.联合索引是如何存储的</h2><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027362510-0e7bde45-39b9-48b9-ba5b-719a145c9208.png#averageHue=%23f7f7f7&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=353&amp;id=u9c6b40cc&amp;originHeight=441&amp;originWidth=581&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=70830&amp;status=done&amp;style=none&amp;taskId=u849264ee-a714-4089-ae92-b41e7b47110&amp;title=&amp;width=464.8" alt="image.png"></p><h2 id="3-最左前缀法则"><a href="#3-最左前缀法则" class="headerlink" title="3.最左前缀法则"></a>3.最左前缀法则</h2><p>最左前缀法则是表示一条sql语句在联合索引中有没有走索引(命中索引/不会全表扫描)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建联合索引</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_a_b_c <span class="token keyword">on</span> table1<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># sql语句有没有命中索引</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">#会走</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">and</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">#会走</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">and</span> b <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">and</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">#会走</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">#不会</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> b <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">and</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">#不会</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">and</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">#会走</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">#不会</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table1 <span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">and</span> c <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">(</span>abc全走索引<span class="token punctuation">)</span><span class="token operator">=</span>》mysql有一个内部优化器 会做一次内部优化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、SQL优化"><a href="#六、SQL优化" class="headerlink" title="六、SQL优化"></a>六、SQL优化</h1><p>SQL优化的目的是为了SQL语句能够具备优秀的查询性能，实现这样的目的有很多的途径：</p><ul><li>工程优化如何实现：数据库标准、表的结构标准、字段的标准</li><li>SQL语句的优化：当前SQL语句有没有命中<h2 id="1-工程才能优化如何实现"><a href="#1-工程才能优化如何实现" class="headerlink" title="1.工程才能优化如何实现"></a>1.工程才能优化如何实现</h2>参考《MySQL军规升级版》<h2 id="2-Explain执行计划——SQL优化神器"><a href="#2-Explain执行计划——SQL优化神器" class="headerlink" title="2.Explain执行计划——SQL优化神器"></a>2.Explain执行计划——SQL优化神器</h2>得知道当前系统里有哪些SQL是慢SQL，查询性能超过1s的sql，然后通过Explain工具可以对当前SQL语句的性能进行判断——为什么慢，怎么解决。<br>要想知道哪些SQL是慢SQL，有两种方式，一种是开启本地MySQL的慢查询日志；另一种是阿里云提供的RDS(第三方部署的MySQL服务器)，提供了查询慢SQL的功能。<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'customer100%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>通过在SQL语句前面加上explain关键字，执行后并不会真正的执行sql语句本身，而是通过explain工具来分析当前这条SQL语句的性能细节：比如是什么样的查询类型、可能用到的索引及实际用到的索引，和一些额外的信息。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027423195-1cd55893-93a9-46a5-8292-0b1fa4b133bf.png#averageHue=%23f7f7f7&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=65&amp;id=u0ab47901&amp;originHeight=81&amp;originWidth=976&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=30213&amp;status=done&amp;style=none&amp;taskId=u524611c9-7267-4637-8cb0-4e7a0e65f7c&amp;title=&amp;width=780.8" alt="image.png"><h2 id="3-MySQL的内部优化器"><a href="#3-MySQL的内部优化器" class="headerlink" title="3.MySQL的内部优化器"></a>3.MySQL的内部优化器</h2>在SQL查询开始之前，MySQL内部优化器会进行一次自我优化，让这一次的查询性能尽可能的好。<br>当前执行的SQL<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_book <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">warnings</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>内部优化器优化后的效果：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*select#1 */</span> <span class="token keyword">select</span> <span class="token string">'1'</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>千峰Java<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token punctuation">`</span>db_mysql_pro<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>tb_book<span class="token punctuation">`</span> <span class="token keyword">where</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-select-type列"><a href="#4-select-type列" class="headerlink" title="4.select_type列"></a>4.select_type列</h2>关闭MySQL对衍生表的合并优化：<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">session</span> optimizer_switch<span class="token operator">=</span><span class="token string">'derived_merge=off'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>执行了这样的计划：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> tb_author <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_book <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> der<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027487395-785064d8-6ae7-468b-b46d-f29d9ef9f656.png#averageHue=%23f3f3f3&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=78&amp;id=ud6883789&amp;originHeight=98&amp;originWidth=971&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=47564&amp;status=done&amp;style=none&amp;taskId=u9b5f6204-b861-4c19-ac38-fda825e3ae6&amp;title=&amp;width=776.8" alt="image.png"></p><ul><li>derived：</li></ul><p>第一条执行的sql是from后面的子查询，该子查询只要在from后面，就会生成一张衍生表，因此他的查询类型：derived</p><ul><li>subquery:</li></ul><p>在select之后from之前的子查询</p><ul><li>primary：</li></ul><p>最外部的select</p><ul><li>simple：</li></ul><p>不包含子查询的简单的查询</p><ul><li>union：</li></ul><p>使用union进行的联合查询的类型</p><h2 id="5-table列"><a href="#5-table列" class="headerlink" title="5.table列"></a>5.table列</h2><p>当前查询正在查哪张表</p><h2 id="6-type列"><a href="#6-type列" class="headerlink" title="6.type列"></a>6.type列</h2><p>type列可以直观的判断出当前的SQL语句的性能。type里的取值和性能的优劣顺序如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token boolean">null</span> <span class="token operator">&gt;</span> system <span class="token operator">&gt;</span> const <span class="token operator">&gt;</span> eq_ref <span class="token operator">&gt;</span> ref <span class="token operator">&gt;</span> range <span class="token operator">&gt;</span> <span class="token keyword">index</span> <span class="token operator">&gt;</span> <span class="token keyword">all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于SQL优化来说，要尽量保证type列的值是属于range及以上级别。</p><ul><li>null</li></ul><p>性能最好的，一般在使用了聚合函数操作索引列，结果直接从索引树获取即可，因此性能是最好的。</p><ul><li>system</li></ul><p>很少见。直接和一条记录进行匹配</p><ul><li>const</li></ul><p>使用主键索引或唯一索引和常量进行比较，这种性能非常好</p><ul><li>eq_ref</li></ul><p>在进行多表连接查询时。如果查询条件是使用了主键进行比较，那么当前查询类型是eq_ref</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_book_author <span class="token keyword">left</span> <span class="token keyword">join</span> tb_book_author<span class="token punctuation">.</span>book_id <span class="token operator">=</span> tb_book<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ref <ul><li> 简单查询：EXPLAIN select * from tb_book where name=’book1’<br>如果查询条件是普通列索引，那么类型ref </li><li> 复杂查询：EXPLAIN select book_id from tb_book left join tb_book_author on tb_book.id = tb_book_author.book_id<br>如果查询条件是普通列索引，那么类型ref </li></ul></li><li> range： </li></ul><p>使用索引进行范围查找</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_book <span class="token keyword">where</span> id<span class="token operator">&gt;</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>index</li></ul><p>查询没有进行条件判断。但是所有的数据都可以直接从索引树上获取（book表中的所有列都有索引)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_book<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>all</li></ul><p>没有走索引，进行了全表扫描</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_author<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-id列"><a href="#7-id列" class="headerlink" title="7.id列"></a>7.id列</h2><p>在多个select中，id越大越先执行，如果id相同。上面的先执行。</p><h2 id="8-possible-keys列"><a href="#8-possible-keys列" class="headerlink" title="8.possible keys列"></a>8.possible keys列</h2><p>这一次的查询可能会用到的索引。也就是说mysql内部优化器会进行判断，如果这一次查询走索引的性能比全表扫描的性能要差，那么内部优化器就让此次查询进行全表扫描——这样的判断依据我们可以通过trace工具来查看。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'custome%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条sql走索引查询的行数是500多万，那么总的数据行数也就500多万，因此直接进行全表扫描性能更快。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027598611-baaaadee-1e2d-4615-bccd-e50c3c0e0a3d.png#averageHue=%23f5f8f6&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=60&amp;id=u5122d9e1&amp;originHeight=75&amp;originWidth=963&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=33708&amp;status=done&amp;style=none&amp;taskId=uf5850f0c-0536-4be9-8ac8-19fa48ced6d&amp;title=&amp;width=770.4" alt="image.png"></p><h2 id="9-key列"><a href="#9-key列" class="headerlink" title="9.key列"></a>9.key列</h2><p>实际该sql语句使用的索引</p><h2 id="10-rows列"><a href="#10-rows列" class="headerlink" title="10.rows列"></a>10.rows列</h2><p>该sql语句可能要查询的数据条数</p><h2 id="11-key-len列"><a href="#11-key-len列" class="headerlink" title="11.key_len列"></a>11.key_len列</h2><p>键的长度，通过这一列可以让我们知道当前命中了联合索引中的哪几列。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'customer10011'</span> <span class="token comment">#74</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'customer10011'</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">30</span> <span class="token comment">#74 4 = 78</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'customer10011'</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">and</span> position <span class="token operator">=</span> <span class="token string">'dev'</span> <span class="token comment">#74 4 62 = 140</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'customer10011'</span> <span class="token operator">and</span> position <span class="token operator">=</span> <span class="token string">'dev'</span> <span class="token comment">#74</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>name长度是74，也就是当看到key-len是74，表示使用了联合索引中的name列<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027617625-9c9f12f1-fe0a-4fc5-8557-f3ff69416f3d.png#averageHue=%23f7f8f6&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=74&amp;id=u454351d1&amp;originHeight=92&amp;originWidth=968&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=38270&amp;status=done&amp;style=none&amp;taskId=u4e87b5c2-95fd-4f05-854b-0c048ec9a7f&amp;title=&amp;width=774.4" alt="image.png"></p><p>计算规则：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span> 字符串<span class="token number">1.</span><span class="token keyword">char</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>：n字节长度<span class="token number">2.</span><span class="token keyword">varchar</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>：<span class="token number">2</span>字节存储字符串长度，如果是utf<span class="token operator">-</span><span class="token number">8</span>，则长度是<span class="token number">3</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token operator">-</span> 数值类型<span class="token number">1.</span><span class="token keyword">tinyint</span>：<span class="token number">1</span>字节<span class="token number">2.</span><span class="token keyword">smallint</span>：<span class="token number">2</span>字节<span class="token number">3.</span><span class="token keyword">int</span>：<span class="token number">4</span>字节<span class="token number">4.</span><span class="token keyword">bigint</span>：<span class="token number">8</span>字节<span class="token operator">-</span>时间类型<span class="token number">1.</span><span class="token keyword">date</span>：<span class="token number">3</span>字节<span class="token number">2.</span><span class="token keyword">timestamp</span>：<span class="token number">4</span>字节<span class="token number">3.</span><span class="token keyword">datetime</span>：<span class="token number">8</span>字节如果字段允许为<span class="token boolean">NULL</span>，需要<span class="token number">1</span>字节记录是否为<span class="token boolean">NULL</span>索引最大长度是<span class="token number">768</span>字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-extra列"><a href="#12-extra列" class="headerlink" title="12.extra列"></a>12.extra列</h2><p>extra列提供了额外的信息，是能够帮助我们判断当前SQL的是否使用了覆盖索引、文件排序、使用了索引进行查询条件等的信息。</p><ul><li><p> Using index：使用了覆盖索引<br>所谓的覆盖索引，指的是当前查询的所有数据字段都是索引列，这就意味着可以直接从索引列中获取数据，而不需要进行查表。<br>使用覆盖索引进行性能优化这种手段是之后sql优化经常要用到的。 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> book_id<span class="token punctuation">,</span>author_id <span class="token keyword">from</span> tb_book_author <span class="token keyword">where</span> book_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">-- 覆盖索引</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_book_author <span class="token keyword">where</span> book_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 没有使用覆盖索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p> Using where </p></li></ul><p>使用了普通索引列做查询条件</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_author <span class="token keyword">where</span> name <span class="token operator">&gt;</span> <span class="token string">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>using index condition</li></ul><p>查询结果没有使用覆盖索引，建议可以使用覆盖索引来优化</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_book_author <span class="token keyword">where</span> book_id <span class="token operator">&gt;</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>using temporary</li></ul><p>在非索引列上进行去重操作就需要使用一张临时表来实现，性能是非常差的。当前name列没有索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token keyword">DISTINCT</span> name <span class="token keyword">from</span> tb_author<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>using filesort</li></ul><p>使用文件排序：会使用磁盘+内存的方式进行文件排序，会设计到两个概念：单路排序、双路排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_author <span class="token keyword">order</span> <span class="token keyword">by</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>select tables optimized away</li></ul><p>直接在索引列上进行聚合函数的操作，没有进行任何的表的操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> tb_book<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="七、Trace工具"><a href="#七、Trace工具" class="headerlink" title="七、Trace工具"></a>七、Trace工具</h1><p>在执行计划中我们发现有的sql会走索引，有的sql即使明确使用了索引也不会走索引。这是因为mysql的内部优化器任务走索引的性能比不走索引全表扫描的性能要差，因此mysql内部优化器选择了使用全表扫描。依据来自与trace工具的结论。</p><h1 id="八、sql优化实战"><a href="#八、sql优化实战" class="headerlink" title="八、sql优化实战"></a>八、sql优化实战</h1><h2 id="1-order-by优化"><a href="#1-order-by优化" class="headerlink" title="1.order by优化"></a>1.order by优化</h2><p>在排序应用场景中，很容易出现文件排序的问题，文件排序会对性能造成影响，因此需要优化</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># using filesort</span><span class="token keyword">Explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">' customer'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> position<span class="token punctuation">;</span><span class="token comment">#没有使用文件排序</span><span class="token keyword">Explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span> <span class="token string">'customer'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> age，position<span class="token punctuation">;</span><span class="token comment">#不满足最左前缀法则，使用了文件排序</span><span class="token keyword">Explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'customer'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> position，age<span class="token punctuation">;</span><span class="token comment">#满足最左前缀法则,使用索引排序</span><span class="token keyword">Explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'customer’ and age=20 order by position，age;show wARNINGS;/* select#l */ select `db_mysql_pro . employees . '</span>id’<span class="token keyword">As</span> <span class="token punctuation">`</span>id<span class="token string">', '</span> db_mysql_pro <span class="token punctuation">.</span> <span class="token string">'employees .'</span> name’<span class="token keyword">As</span><span class="token string">'name”, '</span> db_mysql_pro <span class="token punctuation">.</span> <span class="token string">'employees . '</span> age<span class="token operator">*</span> <span class="token keyword">As</span> ‘age<span class="token string">', '</span> db_mysql_pro<span class="token string">' . '</span>employees <span class="token punctuation">.</span> <span class="token string">' position`As'</span>position <span class="token string">', '</span>db_mysql_pro <span class="token punctuation">.</span><span class="token string">' employees .'</span> hire_time<span class="token punctuation">`</span><span class="token keyword">As</span> <span class="token punctuation">`</span>hire_time<span class="token punctuation">`</span> <span class="token keyword">from</span> <span class="token punctuation">`</span> db_mysql_pro <span class="token punctuation">.</span> <span class="token string">' employees’where( (db_mysql_pro . employees '</span><span class="token punctuation">.</span><span class="token string">' age'</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>db_mysql_pro <span class="token punctuation">.</span> employees <span class="token punctuation">.</span><span class="token string">'name’= '</span>customer<span class="token string">' )) order by~db_mysql_pro`. " employees` . '</span>position<span class="token operator">*</span><span class="token comment"># 排序方向不同，没有使用索引排序</span><span class="token keyword">Explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">' customer’ and age=20 order by age,position desc; #使用范围查询,使用了文件排序Explain select * from employees where name in ( '</span> customer <span class="token string">' , '</span> aa <span class="token string">' ) order by age，position; #使用范围查询，使用了文件排序Explain select * from employees where name &gt; '</span>a' <span class="token keyword">order</span> <span class="token keyword">by</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化手段：</p><ul><li><p>如果排序的字段创建了联合索引，那么尽量在业务不冲突的情况下，遵循最左前缀法则来写排序语句。</p></li><li><p>如果文件排序没办法避免，那么尽量想办法使用覆盖索引。all -&gt; index</p><h2 id="2-group-by优化"><a href="#2-group-by优化" class="headerlink" title="2.group by优化"></a>2.group by优化</h2><p>group &nbsp;by的原理是先排序后分组，因此对于group by的优化参考order by</p><h2 id="3-文件排序的原理"><a href="#3-文件排序的原理" class="headerlink" title="3.文件排序的原理"></a>3.文件排序的原理</h2><p>在执行文件排序的时候，会把查询的数据的大小与系统变量：max_length_for_sort_data的大小比较(默认是1024字节)，如果比系统变量小，那么执行单路排序，反之则执行双路排序。</p></li><li><p> 单路排序<br>把所有的数据扔到sort_buffer内存缓冲区中，进行排序，然后结束 </p></li><li><p> 双路排序<br>取数据的排序字段和主键字段，在内存缓冲区中排序完成后，将主键字段做一次回表查询，获取完整数据。 </p></li></ul><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027876937-59c87b60-dc99-4633-b3c7-665bdeb882e3.png#averageHue=%23f7f7f7&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=551&amp;id=uaa0ed21d&amp;originHeight=689&amp;originWidth=907&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=172488&amp;status=done&amp;style=none&amp;taskId=u3864691c-5c21-40eb-a748-8bd0b630955&amp;title=&amp;width=725.6" alt="image.png"></p><h2 id="4-分页优化"><a href="#4-分页优化" class="headerlink" title="4.分页优化"></a>4.分页优化</h2><p>对于这样的优化查询，mysql会把全部的10010数据拿到，并舍弃掉前面的10000条。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 一次行获取10010，再舍弃掉前10000条</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">limit</span> <span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在主键连续的情况下，可以使用主键来做条件，但是这种情况是很少见的。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> id <span class="token operator">&gt;</span> <span class="token number">10000</span> <span class="token keyword">limit</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于主键不连续情况下的例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">limit</span> <span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">-- 通过先进行覆盖索引的查找，然后在使用join做连续查询获取所有数据。这样比全表扫描要快</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees a <span class="token keyword">inner</span> <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> employees <span class="token keyword">order</span> <span class="token keyword">by</span> name <span class="token keyword">limit</span> <span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> b <span class="token keyword">on</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-join优化"><a href="#5-join优化" class="headerlink" title="5.join优化"></a>5.join优化</h2><p>在join中会涉及到大表(数据量大)和小表(数据量小)的概念。MySQL内部优化器会根据关联字段是否创建了索引来使用不同的算法：</p><ul><li>NLJ(嵌套循环算法)：如果关联字段使用了索引，mysql会对小表做全表扫描，用小表的数据去和大表的数据去做索引字段的关联查询。(type：ref)</li><li>BNLj(块嵌套循环算法)：如果关联字段没有使用索引，mysql会提供一个join buffer缓冲区，先把小表放到缓冲区中，然后全表扫描大表，把大表的数据和缓冲区中的小表数据在内存中进行匹配。</li></ul><p>结论：使用join查询时，一定要建立关联字段的索引，且两张表的关联字段在设计之初就要做到字段类型、长度是一致的，否则索引失效。</p><h2 id="6-in和exists优化"><a href="#6-in和exists优化" class="headerlink" title="6.in和exists优化"></a>6.in和exists优化</h2><p>在SQL中如果A表是大表，B表示小表，那么使用in会更合适。反之应该使用exists。</p><ul><li><p>in：B的数据量&lt;A的数据量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> B<span class="token punctuation">)</span><span class="token comment">#相当于：</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> B<span class="token punctuation">)</span>{<span class="token comment">//B的数据量少，所以循环次数少</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">where</span> A<span class="token punctuation">.</span>id<span class="token operator">=</span>B<span class="token punctuation">.</span>id}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>exists：B的数据量&gt;A的数据量(10:id 1.2.3.4)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> B <span class="token keyword">where</span> B<span class="token punctuation">.</span>id <span class="token operator">=</span> A<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token comment">#等价于：</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> A<span class="token punctuation">)</span>{<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> B <span class="token keyword">where</span> B<span class="token punctuation">.</span>id <span class="token operator">=</span> A<span class="token punctuation">.</span>id}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="7-count优化"><a href="#7-count优化" class="headerlink" title="7.count优化"></a>7.count优化</h2><p>对于count的优化应该是架构层面的优化，因为count的统计是在一个产品会经常出现，而且每个用户访问，所以对于访问频率过高的数据建议维护在缓存中。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685027949975-1d4f9a2a-0f36-44b7-8e47-0e407bb47a01.png#averageHue=%23f8f8f8&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=363&amp;id=u645d1073&amp;originHeight=454&amp;originWidth=906&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=88458&amp;status=done&amp;style=none&amp;taskId=u4afa9f5c-b49b-4fe6-a8c0-82ff53b2531&amp;title=&amp;width=724.8" alt="image.png"></p><h1 id="九、锁的定义和分类"><a href="#九、锁的定义和分类" class="headerlink" title="九、锁的定义和分类"></a>九、锁的定义和分类</h1><h2 id="1-锁的定义"><a href="#1-锁的定义" class="headerlink" title="1.锁的定义"></a>1.锁的定义</h2><p>锁是用来解决多个任务(线程、进程)在并发访问同一共享资源时带来的数据安全问题。虽然使用锁解决了数据安全问题，但是会带来性能的影响，频繁使用锁的程序的性能是必然很差的。<br>对于数据管理软件MySQL来说，必然会到任务的并发访问。那么MySQL是怎么样在数据安全和性能上做权衡的呢？——MVCC设计思想。</p><h2 id="2-锁的分类"><a href="#2-锁的分类" class="headerlink" title="2.锁的分类"></a>2.锁的分类</h2><h3 id="1-从性能上划分：乐观锁和悲观锁"><a href="#1-从性能上划分：乐观锁和悲观锁" class="headerlink" title="1) 从性能上划分：乐观锁和悲观锁"></a>1) 从性能上划分：乐观锁和悲观锁</h3><ul><li><p>悲观锁：悲观的认为当前的并发是非常严重的，所以在任何时候操作上都是互斥。保证了线程的安全，但牺牲了并发性。——总有刁民想要害朕。</p></li><li><p>乐观锁：乐观的认为当前的并发并不严重，因此对于读的情况，大家都可以进行，但是对于写的情况，再进行上锁。CAS自旋锁，在某种情况下性能是ok的，但是频繁自旋会消耗很大的资源。——天网恢恢疏而不漏</p><h3 id="2-从数据的操作细粒度上划分：表锁和行锁"><a href="#2-从数据的操作细粒度上划分：表锁和行锁" class="headerlink" title="2) 从数据的操作细粒度上划分：表锁和行锁"></a>2) 从数据的操作细粒度上划分：表锁和行锁</h3></li><li><p>表锁：对整张表上锁</p></li><li><p>行锁：对表中的某一行上锁</p><h3 id="3-从数据库的操作类型上划分：读锁和写锁"><a href="#3-从数据库的操作类型上划分：读锁和写锁" class="headerlink" title="3) 从数据库的操作类型上划分：读锁和写锁"></a>3) 从数据库的操作类型上划分：读锁和写锁</h3><p>这两种锁都是属于悲观锁</p></li><li><p>读锁(共享锁)：对于同一行数据进行”读”来说，是可以同时进行但是写不行。</p></li><li><p>写锁(排它锁)：在上了写锁之后，及释放写锁之前，在整个过程中是不能进行任何的其他并发操作(其他任务的读和写是都不能进行的)。</p><h2 id="3-表锁"><a href="#3-表锁" class="headerlink" title="3.表锁"></a>3.表锁</h2><p>对整张表进行上锁。MyISAM存储引擎是天然支持表锁的，也就是说在MyISAM的存储引擎的表中如果出现并发的情况，将会出现表锁的效果，MyISAM不支持事务。InnoDB支持事务<br>在InnoDB中上一下表锁：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 对一张表上读锁/写锁格式：</span><span class="token keyword">lock</span> <span class="token keyword">table</span> 表名 <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span><span class="token comment"># 例子</span><span class="token keyword">lock</span> <span class="token keyword">table</span> tb_book <span class="token keyword">read</span><span class="token punctuation">;</span><span class="token comment"># 查看当前会话对所有表的上锁情况</span><span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment"># 释放当前会话的所有锁</span><span class="token keyword">unlock</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读锁：其他任务可以进行读，但是不能进行写<br>写锁：其他任务不能进行读和写。</p><h2 id="4-行锁"><a href="#4-行锁" class="headerlink" title="4.行锁"></a>4.行锁</h2><p>MyISAM只支持表锁，但不支持行锁，InnoDB可以支持行锁。<br>在并发事务里，每个事务的增删改的操作相当于是上了行锁。<br>上行锁的方式：</p></li><li><p>update tb_book set name=’qfjava’ where id=8; &nbsp;对id是8的这行数据上了行锁。</p></li><li><p>select * from tb_book where id=5 for update; 对id是5的这行数据上了行锁。</p></li></ul><p><strong>注意：以上sql都是在事务里执行的，前提要事务未提交才能复现。</strong></p><h1 id="十、MVCC设计思想"><a href="#十、MVCC设计思想" class="headerlink" title="十、MVCC设计思想"></a>十、MVCC设计思想</h1><p>MySQL为了权衡数据安全和性能，使用了MVCC多版本并发控制的设计。</p><h2 id="1-事务的特性"><a href="#1-事务的特性" class="headerlink" title="1.事务的特性"></a>1.事务的特性</h2><ul><li>原子性：一个事务是一个最小的操作单位(原子)，多条sql语句在一个事务中要么同时成功，要么同时失败。</li><li>一致性：事务提交之前和回滚之后的数据是一致的。</li><li>持久性：事务一旦提交，对数据的影响是持久的。</li><li>隔离性：多个事务在并发访问下，提供了一套隔离机制，不同的隔离级别会有不同的并发效果。</li></ul><h2 id="2-事务的隔离级别"><a href="#2-事务的隔离级别" class="headerlink" title="2.事务的隔离级别"></a>2.事务的隔离级别</h2><ul><li>read uncommitted(读未提交)：在一个事务中读取到另一个事务中还没有提交的数据 ——脏读。</li><li>read committed(读已提交)：已经解决了脏读问题，在一个事务中只会读取另一个事务已提交的数据，这种情况会出现不可重复读的问题。就是：在事务中重复读数据，数据的内容是不一样的。</li><li>repeatable read(可重复读)：在一个事务中每次读取的数据都是一致的，不会出现脏读和不可重复读的问题。会出现虚读(幻读)的问题。</li></ul><p>什么是幻读：<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685028044760-b4943d44-3d2b-4c79-970f-fc0a50ccf137.png#averageHue=%23f3f2f2&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=274&amp;id=u348b5cea&amp;originHeight=342&amp;originWidth=981&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=193760&amp;status=done&amp;style=none&amp;taskId=u9a6d3861-e528-481e-9c1c-a804a01713a&amp;title=&amp;width=784.8" alt="image.png"></p><p>解决方案：<br>通过上行锁来解决虚读问题：<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685028053939-db492594-918a-4490-a6ae-9217a56f9932.png#averageHue=%23f6f6f6&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=102&amp;id=ue4106bfc&amp;originHeight=128&amp;originWidth=729&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=38618&amp;status=done&amp;style=none&amp;taskId=u5caed177-7f6c-4cfe-9d70-9977f87ffbb&amp;title=&amp;width=583.2" alt="image.png"><br></p><ul><li>Serializable：串行化的隔离级别直接不允许事务的并发发生，不存在任何的并发性。相当于锁表，性能非常差，一般都不考虑。</li></ul><p>脏读、不可重复度、虚读(幻读)</p><h2 id="3-MVCC思想解读"><a href="#3-MVCC思想解读" class="headerlink" title="3.MVCC思想解读"></a>3.MVCC思想解读</h2><p>MySQL在读和写的操作中，对读的性能进行了并发性的保障，让所有的读都是快照读，对于写的时候，进行版本，如果真实数据的版本比快照版本更新，那么写之前就要进行版本(快照)更新，这样就可以既能够提高读的并发性，又能保证写的数据安全。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685028069850-39fc70eb-ddab-494a-9d65-295417069a4e.png#averageHue=%23f7f7f7&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=335&amp;id=u06398ade&amp;originHeight=419&amp;originWidth=959&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=113556&amp;status=done&amp;style=none&amp;taskId=u9d48b182-d666-4627-a592-119ba37f2d9&amp;title=&amp;width=767.2" alt="image.png"></p><h1 id="十一、死锁和间隙锁"><a href="#十一、死锁和间隙锁" class="headerlink" title="十一、死锁和间隙锁"></a>十一、死锁和间隙锁</h1><h2 id="1-死锁"><a href="#1-死锁" class="headerlink" title="1.死锁"></a>1.死锁</h2><p>所谓的死锁，就是开启的锁没有办法关闭，导致资源的访问因为无法获得锁而处于阻塞状态。<br>演示：事务A和事务B相互持有对方需要的锁的不释放，造成死锁的情况。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685028078709-b5ce14b5-9358-4e00-9f22-de8ce3e9a42f.png#averageHue=%23f1f5f6&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=231&amp;id=udadf9eaa&amp;originHeight=289&amp;originWidth=951&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=199792&amp;status=done&amp;style=none&amp;taskId=ubdbcdf95-9954-4dd0-9b28-8967673329d&amp;title=&amp;width=760.8" alt="image.png"></p><p>事务A更新id为4 -&gt; 事务B更新id为5 -&gt; 事务A更新id为5 -&gt; 事务B更新id为4</p><h2 id="2-间隙锁"><a href="#2-间隙锁" class="headerlink" title="2.间隙锁"></a>2.间隙锁</h2><p>行锁只能对某一行上锁，如果想对某一个范围上锁，就可以使用间隙锁。间隙锁给的条件where id&gt;13 and id&lt;19所处的间隙进行上锁。<br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1685028088086-706306a7-c3f1-453d-be83-c915d751243e.png#averageHue=%23d8e0d7&amp;clientId=uc773eb97-fc2e-4&amp;from=paste&amp;height=350&amp;id=ue57da973&amp;originHeight=438&amp;originWidth=924&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=263934&amp;status=done&amp;style=none&amp;taskId=ucf54161e-9550-4162-82cb-e31b002e411&amp;title=&amp;width=739.2" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置数据库密码加密</title>
      <link href="posts/5cfa3192.html"/>
      <url>posts/5cfa3192.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、Jasypt介绍"><a href="#一、Jasypt介绍" class="headerlink" title="一、Jasypt介绍"></a>一、Jasypt介绍</h1><p><strong>Jasypt是Java加密工具包，能支持对密码的哈希加密，对文本和二进制数据的对称加解密，还能集成SpringBoot项目对配置文件中的密钥进行加密存储。</strong></p><p>引入依赖如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.ulisesbocchio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jasypt-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、Jasypt手动使用"><a href="#二、Jasypt手动使用" class="headerlink" title="二、Jasypt手动使用"></a>二、Jasypt手动使用</h1><h2 id="2-1、密码加密场景"><a href="#2-1、密码加密场景" class="headerlink" title="2.1、密码加密场景"></a>2.1、密码加密场景</h2><p><strong>用户注册账户的时候需要输入密码，我们将密码加密后保存到数据库中，保证用户的敏感数据的安全性。当用户再次登录的时候，我们需要将登录密码和注册时保存的密文密码进行比对，只有比对一致才能完成登录。</strong></p><h3 id="2-1-2、密码加密工具类主要有三个，它们都是实现了PasswordEncryptor接口，下面我们逐步来看。"><a href="#2-1-2、密码加密工具类主要有三个，它们都是实现了PasswordEncryptor接口，下面我们逐步来看。" class="headerlink" title="2.1.2、密码加密工具类主要有三个，它们都是实现了PasswordEncryptor接口，下面我们逐步来看。"></a>2.1.2、密码加密工具类主要有三个，它们都是实现了PasswordEncryptor接口，下面我们逐步来看。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">BasicPasswordEncryptor</span> basicPasswordEncryptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicPasswordEncryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> encryptedPassword <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/signup/{password}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">signup</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户注册密码为：{}"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        encryptedPassword <span class="token operator">=</span> basicPasswordEncryptor<span class="token punctuation">.</span><span class="token function">encryptPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户注册密码加密后为：{}"</span><span class="token punctuation">,</span> encryptedPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> encryptedPassword<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/signin/{password}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">signin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户登录密码为：{}"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>basicPasswordEncryptor<span class="token punctuation">.</span><span class="token function">checkPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> encryptedPassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户登录成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户登录失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"fail"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动项目后，我们首先注册用户密码<strong>localhost:8080/signup/123456</strong>，就能得到密文<strong>5b32ygn5pbBvphjIKco6X8Z2VfWqwEUw</strong>，并将其保存到类变量中暂存，当我们再次登录<strong>localhost:8080/signin/123456</strong>，就能登录成功了。相反的，如果登录时密码随意输错，就会登录失败。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">57.038</span>  INFO <span class="token number">26268</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>myapp<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>SignController</span>      <span class="token operator">:</span> 用户注册密码为：<span class="token number">123456</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">57.039</span>  INFO <span class="token number">26268</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>myapp<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>SignController</span>      <span class="token operator">:</span> 用户注册密码加密后为：<span class="token number">5</span>b32ygn5pbBvphjIKco6X8Z2VfWqwEUw<span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">07.405</span>  INFO <span class="token number">26268</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>myapp<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>SignController</span>      <span class="token operator">:</span> 用户登录密码为：<span class="token number">123456</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">07.406</span>  INFO <span class="token number">26268</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>myapp<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>SignController</span>      <span class="token operator">:</span> 用户登录成功！<span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">12.767</span>  INFO <span class="token number">26268</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>myapp<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>SignController</span>      <span class="token operator">:</span> 用户登录密码为：<span class="token number">123457</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">12.767</span>  INFO <span class="token number">26268</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>myapp<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>SignController</span>      <span class="token operator">:</span> 用户登录失败！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-3、那么这种加密方式是什么呢？"><a href="#2-1-3、那么这种加密方式是什么呢？" class="headerlink" title="2.1.3、那么这种加密方式是什么呢？"></a>2.1.3、那么这种加密方式是什么呢？</h3><p>我们可以打开<strong>BasicPasswordEncryptor</strong>的源码，看到类上面的注释：</p><ul><li>Algorithm: MD5.</li><li>Salt size: 8 bytes.</li><li>Iterations: 1000.</li></ul><p>意思就是使用的MD5这种哈希算法，并且使用8字节（64位）的盐值，迭代计算1000次得到的密文。</p><p>除了使用如上的<strong>BasicPasswordEncryptor</strong>工具之外，还有<strong>StrongPasswordEncryptor</strong>工具类，它的加密登记更加的安全：</p><ul><li>Algorithm: SHA-256.</li><li>Salt size: 16 bytes.</li><li>Iterations: 100000.</li></ul><p>如果这些加密算法都不能满足你的要求，就可以使用<strong>ConfigurablePasswordEncryptor</strong>来自定义加密工具类<strong>ConfigurablePasswordEncryptor</strong>，可以设置自己需要使用的算法。</p><h3 id="2-1-4、总结"><a href="#2-1-4、总结" class="headerlink" title="2.1.4、总结"></a>2.1.4、总结</h3><p>接口类<strong>PasswordEncryptor</strong>主要有如下三个实现类：</p><ul><li>BasicPasswordEncryptor，使用MD5算法；</li><li>StrongPasswordEncryptor，使用SHA-256算法；</li><li>ConfigurablePasswordEncryptor，可自定义指定哈希算法；</li></ul><p>哈希算法是不可逆的，因此只有加密<strong>encryptPassword</strong>和检查<strong>checkPassword</strong>两个方法。</p><h2 id="2-2、文本加密场景"><a href="#2-2、文本加密场景" class="headerlink" title="2.2、文本加密场景"></a>2.2、文本加密场景</h2><p><strong>用户的手机号、身份证号等敏感信息在存储的时候需要进行加密，但是这些敏感数据在需要使用的时候是需要明文解密的，因此不适合使用2.1节的哈希算法，而是使用对称加密的形式。</strong></p><h3 id="2-2-1、加密事例"><a href="#2-2-1、加密事例" class="headerlink" title="2.2.1、加密事例"></a>2.2.1、加密事例</h3><p>文本加密工具类主要有三个，它们都是实现了<strong>TextEncryptor</strong>接口，下面我们逐步来看。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BasicTextEncryptor</span> basicTextEncryptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicTextEncryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SECRET <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> encryptedText <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        basicTextEncryptor<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/encryptText/{plainText}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encryptText</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> plainText<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户输入明文：{}"</span><span class="token punctuation">,</span> plainText<span class="token punctuation">)</span><span class="token punctuation">;</span>        encryptedText <span class="token operator">=</span> basicTextEncryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户加密密文：{}"</span><span class="token punctuation">,</span> encryptedText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> encryptedText<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/decryptText"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decryptText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> plainText <span class="token operator">=</span> basicTextEncryptor<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encryptedText<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户原始明文：{}"</span><span class="token punctuation">,</span> plainText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> plainText<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目启动后，我们分别访问<strong>localhost:8080/encryptText/hello</strong>进行加密，访问<strong>localhost:8080/decryptText</strong>进行解密。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">36.949</span>  INFO <span class="token number">21652</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>myapp<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>TextController</span>      <span class="token operator">:</span> 用户输入明文：hello<span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">36.950</span>  INFO <span class="token number">21652</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>myapp<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>TextController</span>      <span class="token operator">:</span> 用户加密密文：u<span class="token operator">/</span>qYluhyFpyOA6xMD3z3JA<span class="token operator">==</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">46.345</span>  INFO <span class="token number">21652</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>e<span class="token punctuation">.</span>myapp<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>TextController</span>      <span class="token operator">:</span> 用户原始明文：hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2、加密工具类"><a href="#2-2-2、加密工具类" class="headerlink" title="2.2.2、加密工具类"></a>2.2.2、加密工具类</h3><p>我们同样打开<strong>BasicTextEncryptor</strong>可以看到它的加密原理：</p><ul><li>Algorithm: PBEWithMD5AndDES.</li><li>Key obtention iterations: 1000.</li></ul><p>同样的，我们可以使用安全性更高的<strong>StrongTextEncryptor</strong>：</p><ul><li>Algorithm: PBEWithMD5AndTripleDES.</li><li>Key obtention iterations: 1000.</li></ul><p>还有安全性更高的<strong>AES256TextEncryptor</strong>：</p><ul><li>Algorithm: PBEWithHMACSHA512AndAES_256”.</li><li>Key obtention iterations: 1000.</li></ul><h2 id="2-3、数值加密场景"><a href="#2-3、数值加密场景" class="headerlink" title="2.3、数值加密场景"></a>2.3、数值加密场景</h2><p>如果需要对整数或者小数进行加密，就可以分别使用<strong>IntegerNumberEncryptor</strong>接口和<strong>DecimalNumberEncryptor</strong>接口的实现类。同样的，这种场景的加密也都是对称加密，用法完全一样。<br>IntegerNumberEncryptor：主要用来对整数进行加解密。</p><ul><li>BasicIntegerNumberEncryptor<ul><li>Algorithm: PBEWithMD5AndDES.    </li><li>Key obtention iterations: 1000.</li></ul></li><li>StrongIntegerNumberEncryptor<ul><li>Algorithm: PBEWithMD5AndTripleDES.</li><li>Key obtention iterations: 1000.</li></ul></li><li>AES256IntegerNumberEncryptor<ul><li>Algorithm: PBEWithHMACSHA512AndAES_256.</li><li>Key obtention iterations: 1000.</li></ul></li></ul><p>DecimalNumberEncryptor：主要用来对小数进行加解密。</p><ul><li>BasicDecimalNumberEncryptor<ul><li>Algorithm: PBEWithMD5AndDES.</li><li>Key obtention iterations: 1000.</li></ul></li><li>StrongDecimalNumberEncryptor<ul><li>Algorithm: PBEWithMD5AndTripleDES.</li><li>Key obtention iterations: 1000.</li></ul></li><li>AES256DecimalNumberEncryptor<ul><li>Algorithm: PBEWithHMACSHA512AndAES_256.</li><li>Key obtention iterations: 1000.</li></ul></li></ul><h1 id="三、Springboot整合Jasypt"><a href="#三、Springboot整合Jasypt" class="headerlink" title="三、Springboot整合Jasypt"></a>三、Springboot整合Jasypt</h1><h2 id="3-1、数据库配置"><a href="#3-1、数据库配置" class="headerlink" title="3.1、数据库配置"></a>3.1、数据库配置</h2><p>SpringBoot应用中有很多密钥和密码都是存储在配置文件中的，我们需要将它们以密文的方式存储起来。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 数据库配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//10.33.39.209<span class="token punctuation">:</span>3306/t_test<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai&amp;userSSL=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> ENC(7i/Lkb9SnPzWnx+0NzTvNw==)    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>      <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 最小空闲连接数量</span>      <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">180000</span> <span class="token comment"># 空闲连接存活最大时间，默认600000（10分钟）</span>      <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 连接池最大连接数，默认是10</span>      <span class="token key atrule">auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 此属性控制从池返回的连接的默认自动提交行为,默认值：true</span>      <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> AcoHikariCP <span class="token comment"># 连接池名称</span>      <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">1800000</span> <span class="token comment"># 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟</span>      <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span> <span class="token comment"># 数据库连接超时时间,默认30秒，即30000</span><span class="token comment"># 加密配置</span><span class="token key atrule">jasypt</span><span class="token punctuation">:</span>  <span class="token key atrule">encryptor</span><span class="token punctuation">:</span>    <span class="token comment"># 指定加密密钥，生产环境请放到启动参数里面</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> acoBasicAlgorithm    <span class="token comment"># 指定解密算法，需要和加密时使用的算法一致</span>    <span class="token key atrule">algorithm</span><span class="token punctuation">:</span> PBEWithMD5AndDES    <span class="token comment"># 指定initialization vector类型</span>    <span class="token key atrule">iv-generator-classname</span><span class="token punctuation">:</span> org.jasypt.iv.NoIvGenerator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如上是对数据库密码进行加密存储，密文是怎么的来的？可以写一个测试类，使用第二节介绍的内容自己手动加密。</strong></p><h2 id="3-2、工具类"><a href="#3-2、工具类" class="headerlink" title="3.2、工具类"></a>3.2、工具类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JasyptUtils</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 加密使用密钥     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PRIVATE_KEY <span class="token operator">=</span> <span class="token string">"acoBasicAlgorithm"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 文本加密     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BasicTextEncryptor</span> basicTextEncryptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicTextEncryptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        basicTextEncryptor<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>PRIVATE_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 私有构造方法，防止被意外实例化     */</span>    <span class="token keyword">private</span> <span class="token class-name">JasyptUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 明文加密     *     * @param plaintext 明文     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> plaintext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"明文字符串为：{}"</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用的加密算法可以在源码的类注释中看到</span>        <span class="token class-name">String</span> ciphertext <span class="token operator">=</span> basicTextEncryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"密文字符串为：{}"</span><span class="token punctuation">,</span> ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ciphertext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 解密     *     * @param ciphertext 密文     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> ciphertext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"密文字符串为：{}"</span><span class="token punctuation">,</span> ciphertext<span class="token punctuation">)</span><span class="token punctuation">;</span>        ciphertext <span class="token operator">=</span> <span class="token string">"ENC("</span> <span class="token operator">+</span> ciphertext <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">PropertyValueEncryptionUtils</span><span class="token punctuation">.</span><span class="token function">isEncryptedValue</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> plaintext <span class="token operator">=</span> <span class="token class-name">PropertyValueEncryptionUtils</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> basicTextEncryptor<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"明文字符串为：{}"</span><span class="token punctuation">,</span> plaintext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> plaintext<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"解密失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3、测试类"><a href="#3-3、测试类" class="headerlink" title="3.3、测试类"></a>3.3、测试类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">JasyptApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEncrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> plainText <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ciperText <span class="token operator">=</span> <span class="token class-name">JasyptUtils</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plainText<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"加密后的密文为：{}"</span><span class="token punctuation">,</span> ciperText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDecrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> ciperText <span class="token operator">=</span> <span class="token string">"7i/Lkb9SnPzWnx+0NzTvNw=="</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> plainText <span class="token operator">=</span> <span class="token class-name">JasyptUtils</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>ciperText<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"解密后的明文为：{}"</span><span class="token punctuation">,</span> plainText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、生产环境启动"><a href="#四、生产环境启动" class="headerlink" title="四、生产环境启动"></a>四、生产环境启动</h1><p><strong>生产环境密钥作为启动参数：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">java -jar -Djasypt.encryptor.password<span class="token operator">=</span>acoBasicAlgorithm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成RocketMq</title>
      <link href="posts/84726aad.html"/>
      <url>posts/84726aad.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot集成RocketMq"><a href="#Spring-Boot集成RocketMq" class="headerlink" title="Spring Boot集成RocketMq"></a>Spring Boot集成RocketMq</h1><h2 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 注意rocketmq与此依赖版本的对应 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>rocketmq-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、SpringBoot发送普通消息"><a href="#2、SpringBoot发送普通消息" class="headerlink" title="2、SpringBoot发送普通消息"></a>2、SpringBoot发送普通消息</h2><h3 id="2-1、生产者"><a href="#2-1、生产者" class="headerlink" title="2.1、生产者"></a>2.1、生产者</h3><h4 id="2-1-1、配置文件"><a href="#2-1-1、配置文件" class="headerlink" title="2.1.1、配置文件"></a>2.1.1、配置文件</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8088</span><span class="token key atrule">rocketmq</span><span class="token punctuation">:</span>  <span class="token key atrule">producer</span><span class="token punctuation">:</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>boot<span class="token punctuation">-</span>producer<span class="token punctuation">-</span>group <span class="token comment">#producer组名</span>  <span class="token key atrule">name-server</span><span class="token punctuation">:</span> 10.33.39.115<span class="token punctuation">:</span><span class="token number">9876</span> <span class="token comment">#namesrv地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2、生产者代码"><a href="#2-1-2、生产者代码" class="headerlink" title="2.1.2、生产者代码"></a>2.1.2、生产者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>producer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RocketMQTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token comment">/** * 生产者 * @author A.co * @date 2023/3/22 17:32 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * 发送消息     * @param topic 主题     * @param message   内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送消息成功！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-3、测试类代码"><a href="#2-1-3、测试类代码" class="headerlink" title="2.1.3、测试类代码"></a>2.1.3、测试类代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">MyProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token comment">/** * @author A.co * @date 2023/3/22 17:36 */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerApplicationTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">MyProducer</span> myProducer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        myProducer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"my-boot-topic1"</span><span class="token punctuation">,</span><span class="token string">"Hello My RocketMq Consumer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2、消费者"><a href="#2-2、消费者" class="headerlink" title="2.2、消费者"></a>2.2、消费者</h3><h4 id="2-2-1、配置文件"><a href="#2-2-1、配置文件" class="headerlink" title="2.2.1、配置文件"></a>2.2.1、配置文件</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8088</span><span class="token key atrule">rocketmq</span><span class="token punctuation">:</span>  <span class="token key atrule">name-server</span><span class="token punctuation">:</span> 10.33.39.115<span class="token punctuation">:</span><span class="token number">9876</span> <span class="token comment">#namesrv地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2、消费者代码"><a href="#2-2-2、消费者代码" class="headerlink" title="2.2.2、消费者代码"></a>2.2.2、消费者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RocketMQMessageListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RocketMQListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token comment">/** * 消费者 * @author A.co * @date 2023/3/22 17:41 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>consumerGroup <span class="token operator">=</span> <span class="token string">"my-boot-consumer-group"</span><span class="token punctuation">,</span>topic <span class="token operator">=</span> <span class="token string">"my-boot-topic1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//消费消息</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接受消息："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、SpringBoot发送事务消息"><a href="#3、SpringBoot发送事务消息" class="headerlink" title="3、SpringBoot发送事务消息"></a>3、SpringBoot发送事务消息</h2><h3 id="3-1、生产者"><a href="#3-1、生产者" class="headerlink" title="3.1、生产者"></a>3.1、生产者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>producer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">TransactionSendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RocketMQTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">MessageBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token comment">/** * 生产者 * @author A.co * @date 2023/3/22 17:32 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * 发送事务消息     * @param topic     * @param msg     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//tag组</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"TagA"</span><span class="token punctuation">,</span><span class="token string">"TagB"</span><span class="token punctuation">,</span><span class="token string">"TagC"</span><span class="token punctuation">,</span><span class="token string">"TagD"</span><span class="token punctuation">,</span><span class="token string">"TagE"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//发送事务消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//topic和tag整合在一起</span>            <span class="token class-name">String</span> destination <span class="token operator">=</span> topic <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">TransactionSendResult</span> sendResult <span class="token operator">=</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> message<span class="token punctuation">,</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送事务消息成功：{}"</span><span class="token punctuation">,</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2、事务监听器"><a href="#3-2、事务监听器" class="headerlink" title="3.2、事务监听器"></a>3.2、事务监听器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>listener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RocketMQTransactionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RocketMQLocalTransactionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RocketMQLocalTransactionState</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">RocketMQUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">StringMessageConverter</span><span class="token punctuation">;</span><span class="token comment">/** * 本地事务监听器 * @author A.co * @date 2023/3/23 14:48 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RocketMQTransactionListener</span><span class="token punctuation">(</span>rocketMQTemplateBeanName <span class="token operator">=</span> <span class="token string">"rocketMQTemplate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRocketMqListener</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQLocalTransactionListener</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 本地事务处理     * @param message   消息体     * @param o 参数     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RocketMQLocalTransactionState</span> <span class="token function">executeLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//生产者把目的地作为参数传过来了</span>        <span class="token class-name">String</span> destination <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>        <span class="token comment">//转换spring消息为rocketmq的消息体</span>        <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span>Message</span> convert <span class="token operator">=</span> <span class="token class-name">RocketMQUtil</span><span class="token punctuation">.</span><span class="token function">convertToRocketMessage</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">StringMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//消息转换器</span>                <span class="token string">"UTF-8"</span><span class="token punctuation">,</span>    <span class="token comment">//字节编码</span>                destination<span class="token punctuation">,</span>    <span class="token comment">//消息地址</span>                message <span class="token comment">//消息</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> tags <span class="token operator">=</span> convert<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span><span class="token string">"TagA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"--------------------本地事务提交--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">RocketMQLocalTransactionState</span><span class="token punctuation">.</span>COMMIT<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span><span class="token string">"TagB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"--------------------本地事务回滚--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">RocketMQLocalTransactionState</span><span class="token punctuation">.</span>ROLLBACK<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"---------------------本地事务未知消息------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">RocketMQLocalTransactionState</span><span class="token punctuation">.</span>UNKNOWN<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RocketMQLocalTransactionState</span> <span class="token function">checkLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3、消费者"><a href="#3-3、消费者" class="headerlink" title="3.3、消费者"></a>3.3、消费者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>consumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RocketMQMessageListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RocketMQListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token comment">/** * 消费者 * @author A.co * @date 2023/3/22 17:41 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>consumerGroup <span class="token operator">=</span> <span class="token string">"my-boot-consumer-group"</span><span class="token punctuation">,</span>topic <span class="token operator">=</span> <span class="token string">"my-boot-topic1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//消费消息</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接受消息："</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMq的7种消息模式</title>
      <link href="posts/96c31d08.html"/>
      <url>posts/96c31d08.html</url>
      
        <content type="html"><![CDATA[<h1 id="RocketMQ的7种消息模式"><a href="#RocketMQ的7种消息模式" class="headerlink" title="RocketMQ的7种消息模式"></a>RocketMQ的7种消息模式</h1><h2 id="1、简单消息"><a href="#1、简单消息" class="headerlink" title="1、简单消息"></a>1、简单消息</h2><blockquote><p><strong>简单消息分成三种：同步消息、异步消息、单向消息。</strong></p></blockquote><h3 id="1-1、同步消息"><a href="#1-1、同步消息" class="headerlink" title="1.1、同步消息"></a>1.1、同步消息</h3><blockquote><p><strong>生产者发送消息后，必须等待broker返回消息后才继续之后的业务逻辑，在broker返回信息之前，生产者阻塞等待。</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RemotingHelper</span><span class="token punctuation">;</span><span class="token comment">/** * 简单消息-同步消息 * @author A.co * @date 2023/3/14 22:34 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SyncProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"syncProducerGroup1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"10.33.39.24:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello RocketMq"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//关闭生产者</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:::tips<br><strong>同步消息的应用场景：如重要通知消息、短信通知、短信营销系统等。</strong><br>:::</p><h3 id="1-2、异步消息"><a href="#1-2、异步消息" class="headerlink" title="1.2、异步消息"></a>1.2、异步消息</h3><blockquote><p><strong>生产者发完消息后，不需要等待broker的回信，可以直接执行之后的业务逻辑。生产者提供一个回调函数供broker调用，体现了异步的方式。</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendCallback</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RemotingHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 简单消息-异步消息 * @author A.co * @date 2023/3/14 22:46 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"AsyncProducerGroup1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"10.33.39.24:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置异步发送消息失败重试时间</span>        producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线程屏障</span>        <span class="token keyword">int</span> messageCount <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> messageCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"AsyncTopicTest"</span><span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token string">"OrderId188"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello RocketMq"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">//成功回调</span>                        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10d OK %s %n"</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span>sendResult<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment">//失败回调</span>                        countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10d Exception %s %n"</span><span class="token punctuation">,</span>index<span class="token punctuation">,</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                        throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//等待消息回调</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭生产者</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:::tips<br><strong>异步传输一般用于响应时间敏感的业务场景。</strong><br>:::</p><h3 id="1-3、单向消息"><a href="#1-3、单向消息" class="headerlink" title="1.3、单向消息"></a>1.3、单向消息</h3><blockquote><p><strong>生产者发送完消息后不需要等待任何回复，直接进行之后的业务逻辑，单向传输用于需要中等可靠性的情况，例如日志收集。</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>simple</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RemotingHelper</span><span class="token punctuation">;</span><span class="token comment">/** * 简单消息-单向消息 * @author A.co * @date 2023/3/14 23:00 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OneWayProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"OneWayProducerGroup1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"10.33.39.24:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello RocketMq"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//关闭生产者</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、顺序消息"><a href="#2、顺序消息" class="headerlink" title="2、顺序消息"></a>2、顺序消息</h2><blockquote><p><strong>顺序消息指的是消费者消费消息的顺序按照发送者发送消息的顺序执行。顺序消息分成两种：局部顺序和全局顺序。</strong></p></blockquote><h3 id="2-1、局部顺序"><a href="#2-1、局部顺序" class="headerlink" title="2.1、局部顺序"></a>2.1、局部顺序</h3><blockquote><p>局部消息指的是消费者消费某个topic的某个队列中的消息是顺序的。消费者使用MessageListenerOrderly类做消息监听，实现局部顺序。</p></blockquote><h4 id="2-1-1、生产者"><a href="#2-1-1、生产者" class="headerlink" title="2.1.1、生产者"></a>2.1.1、生产者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">MQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">MessageQueueSelector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RemotingHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 顺序消息-生产者 * @author A.co * @version 1.0 * @date 2023/3/16 16:32 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"order_producer_group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//namesrv服务器可以从环境变量中配置</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> orderId <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"OrderTopicTest"</span><span class="token punctuation">,</span> <span class="token string">"order_"</span> <span class="token operator">+</span> orderId<span class="token punctuation">,</span> <span class="token string">"KEY"</span> <span class="token operator">+</span> orderId<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"order_"</span> <span class="token operator">+</span> orderId <span class="token operator">+</span> <span class="token string">" step "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//发送消息</span>                <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//o是方法的第三个参数传进来的</span>                    <span class="token class-name">Integer</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>                    <span class="token comment">//获取发送消息的队列，因为得保证顺序消息，所以只能把消息发送到同一个队列中进行消费，舍弃了负载均衡</span>                    <span class="token keyword">int</span> index <span class="token operator">=</span> id <span class="token operator">%</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2、消费者"><a href="#2-1-2、消费者" class="headerlink" title="2.1.2、消费者"></a>2.1.2、消费者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 顺序消息-消费者 * @author A.co * @version 1.0 * @date 2023/3/16 16:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建消费者</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"order_consumer_group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定消费者先消费队列中的第一个偏移量，即先进先出</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span>CONSUME_FROM_FIRST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"OrderTopicTest"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册监听器(序列监听器,保证一个队列一个线程)</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">ConsumeOrderlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeOrderlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//自动提交</span>                context<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息内容："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeOrderlyStatus</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动消费者</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已启动......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2、全局顺序"><a href="#2-2、全局顺序" class="headerlink" title="2.2、全局顺序"></a>2.2、全局顺序</h3><blockquote><p><strong>消费者消费全部消息都是顺序的，只能通过一个某个topic只有一个队列才能实现，这种应用场景较少，且性能较差。默认生成的topic会有4个队列，为了实现全局顺序，一个topic里只能设置成1个队列，且不能做集群部署。</strong></p></blockquote><h3 id="2-3、乱序消费"><a href="#2-3、乱序消费" class="headerlink" title="2.3、乱序消费"></a>2.3、乱序消费</h3><blockquote><p><strong>消费者消费消息不需要关注消息的顺序。消费者使用MessageListenerConcurrently类做消息监听。</strong></p></blockquote><h4 id="2-3-1、生产者"><a href="#2-3-1、生产者" class="headerlink" title="2.3.1、生产者"></a>2.3.1、生产者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">MQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">MessageQueueSelector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RemotingHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 顺序消息-生产者 * @author A.co * @version 1.0 * @date 2023/3/16 16:32 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"order_producer_group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//namesrv服务器可以从环境变量中配置</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> orderId <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"OrderTopicTest"</span><span class="token punctuation">,</span> <span class="token string">"order_"</span> <span class="token operator">+</span> orderId<span class="token punctuation">,</span> <span class="token string">"KEY"</span> <span class="token operator">+</span> orderId<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"order_"</span> <span class="token operator">+</span> orderId <span class="token operator">+</span> <span class="token string">" step "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//发送消息</span>                <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> arg<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token comment">//o是方法的第三个参数传进来的</span>                    <span class="token class-name">Integer</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>                    <span class="token comment">//获取发送消息的队列，因为得保证顺序消息，所以只能把消息发送到同一个队列中进行消费，舍弃了负载均衡</span>                    <span class="token keyword">int</span> index <span class="token operator">=</span> id <span class="token operator">%</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2、消费者"><a href="#2-3-2、消费者" class="headerlink" title="2.3.2、消费者"></a>2.3.2、消费者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 顺序消息-消费者 * @author A.co * @version 1.0 * @date 2023/3/16 16:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建消费者</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"order_consumer_group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定消费者先消费队列中的第一个偏移量，即先进先出</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span>CONSUME_FROM_FIRST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"OrderTopicTest"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注册监听器</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//遍历消息</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> messageExt <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息内容："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动消费者</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已启动......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、广播消息"><a href="#3、广播消息" class="headerlink" title="3、广播消息"></a>3、广播消息</h2><blockquote><p><strong>广播是向主题（topic）的所有订阅者发送消息。订阅同一个topic的多个消费者能全量收到生产者发送的所有消息，即生产者向订阅了同一个主题的消费者同时发送一份消息。</strong></p></blockquote><h3 id="3-1、生产者"><a href="#3-1、生产者" class="headerlink" title="3.1、生产者"></a>3.1、生产者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>broadcast</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RemotingHelper</span><span class="token punctuation">;</span><span class="token comment">/** * 广播消息-生产者 * @author A.co * @version 1.0 * @date 2023/3/17 16:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BroadcastProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"broadcast_producer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"BroadcastTopicTest"</span><span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello world"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//发送消息</span>            <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//关闭生产者</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2、消费者"><a href="#3-2、消费者" class="headerlink" title="3.2、消费者"></a>3.2、消费者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>broadcast</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>heartbeat<span class="token punctuation">.</span></span><span class="token class-name">MessageModel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 广播消息-消费者 * @author A.co * @version 1.0 * @date 2023/3/17 16:06 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BroadcastConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建消费者</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"broadcast_consumer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定消费者从第一个偏移量开始消费</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span><span class="token class-name">ConsumeFromWhere</span><span class="token punctuation">.</span>CONSUME_FROM_FIRST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置为广播模式</span>        consumer<span class="token punctuation">.</span><span class="token function">setMessageModel</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>BROADCASTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"BroadcastTopicTest"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建监听器</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//打印信息</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收信息："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动消费者</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已启动......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、延迟消息"><a href="#4、延迟消息" class="headerlink" title="4、延迟消息"></a>4、延迟消息</h2><p>延迟消息与普通消息的不同之处在于，它们要等到指定时间之后才会被传递。</p><h3 id="4-1、生产者"><a href="#4-1、生产者" class="headerlink" title="4.1、生产者"></a>4.1、生产者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>scheduled</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token comment">/** * 延迟消息-生产者 * @author A.co * @version 1.0 * @date 2023/3/17 16:27 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"scheduled_producer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//发送消息</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"scheduledTopicTest"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello World"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//指定延迟等级（开源的RocketMq提供了18个等级延迟，其它的只能买商业版才能提供）</span>            message<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//关闭生产者</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2、消费者"><a href="#4-2、消费者" class="headerlink" title="4.2、消费者"></a>4.2、消费者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>scheduled</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 延迟消息-消费者 * @author A.co * @version 1.0 * @date 2023/3/17 16:31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建消费者</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"scheduled_consumer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"scheduledTopicTest"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建监听器</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//消费消息</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收消息："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动消费者</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已启动......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、批量消息"><a href="#5、批量消息" class="headerlink" title="5、批量消息"></a>5、批量消息</h2><blockquote><p><strong>批量发送消息提高了传递小消息的性能。</strong></p></blockquote><h3 id="5-1、使用批量消息"><a href="#5-1、使用批量消息" class="headerlink" title="5.1、使用批量消息"></a>5.1、使用批量消息</h3><h4 id="5-1-1、生产者"><a href="#5-1-1、生产者" class="headerlink" title="5.1.1、生产者"></a>5.1.1、生产者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>batch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 批量消息-生产者 * @author A.co * @date 2023/3/19 11:31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"batch_producer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//批量发送消息</span>        <span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">"BatchTest"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span><span class="token string">"TagA"</span><span class="token punctuation">,</span><span class="token string">"OrderID001"</span><span class="token punctuation">,</span><span class="token string">"Hello World0"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span><span class="token string">"TagA"</span><span class="token punctuation">,</span><span class="token string">"OrderID002"</span><span class="token punctuation">,</span><span class="token string">"Hello World1"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span><span class="token string">"TagA"</span><span class="token punctuation">,</span><span class="token string">"OrderID003"</span><span class="token punctuation">,</span><span class="token string">"Hello World2"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭生产者</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-2、消费者"><a href="#5-1-2、消费者" class="headerlink" title="5.1.2、消费者"></a>5.1.2、消费者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>batch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>heartbeat<span class="token punctuation">.</span></span><span class="token class-name">MessageModel</span><span class="token punctuation">;</span><span class="token comment">/** * 批量消息-消费者 * @author A.co * @date 2023/3/19 11:58 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建消费者</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"batch_consumer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置为广播模式</span>        consumer<span class="token punctuation">.</span><span class="token function">setMessageModel</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>BROADCASTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"BatchTest"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建监听器</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>msgs<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//打印信息</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收信息："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动消费者</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已启动......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2、超出限制的批量消息"><a href="#5-2、超出限制的批量消息" class="headerlink" title="5.2、超出限制的批量消息"></a>5.2、超出限制的批量消息</h3><blockquote><p><strong>官方建议批量消息的总大小不应超过1m，实际不应超过4m。如果超过4m的批量消息需要进行分批处理，同时设置broker的配置参数为4m（在broker的配置文件中修改：maxMessageSize=4194304）</strong></p></blockquote><h4 id="5-2-1、生产者"><a href="#5-2-1、生产者" class="headerlink" title="5.2.1、生产者"></a>5.2.1、生产者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>batch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 批量消息-超出最大发送消息生产者 * @author A.co * @date 2023/3/19 11:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MaxBatchProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"batch_producer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//主题</span>        <span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">"BatchTest"</span><span class="token punctuation">;</span>        <span class="token comment">//模拟创建最大消息</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span><span class="token string">"Tag"</span><span class="token punctuation">,</span><span class="token string">"OrderId"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"Hello World "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//        producer.send(messages);</span>        <span class="token comment">//分割消息，防止超出最大消息容量</span>        <span class="token class-name">ListSplitter</span> splitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListSplitter</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>splitter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> splitter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//关闭消息</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-2、ListSplitter工具类"><a href="#5-2-2、ListSplitter工具类" class="headerlink" title="5.2.2、ListSplitter工具类"></a>5.2.2、ListSplitter工具类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>batch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Spliterator</span><span class="token punctuation">;</span><span class="token comment">/** * 消息分割器 * @author A.co * @date 2023/3/19 11:37 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListSplitter</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 限制的消息总长度     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> sizeLimit <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 分割的消息     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">;</span>    <span class="token comment">/**     * 起始下标     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currIndex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ListSplitter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>messages <span class="token operator">=</span> messages<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> currIndex <span class="token operator">&lt;</span> messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nextIndex <span class="token operator">=</span> currIndex<span class="token punctuation">;</span>        <span class="token keyword">int</span> totalSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> nextIndex <span class="token operator">&lt;</span> messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> nextIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nextIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取消息的主题、内容和配置的字节长度</span>            <span class="token keyword">int</span> tmpSize <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> properties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmpSize <span class="token operator">+=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tmpSize <span class="token operator">=</span> tmpSize <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSize <span class="token operator">&gt;</span> sizeLimit<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//单个消息超出sizeLimit是意外的</span>                <span class="token comment">//这里就让它去吧，否则它会阻塞拆分过程</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">-</span> currIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">//如果下一个子列表没有元素，添加这个元素，然后中断，否则就断了</span>                    nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSize <span class="token operator">+</span> totalSize <span class="token operator">&gt;</span> sizeLimit<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                totalSize <span class="token operator">+=</span> tmpSize<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> subList <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">,</span> nextIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        currIndex <span class="token operator">=</span> nextIndex<span class="token punctuation">;</span>        <span class="token keyword">return</span> subList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-3、消费者"><a href="#5-2-3、消费者" class="headerlink" title="5.2.3、消费者"></a>5.2.3、消费者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>batch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>heartbeat<span class="token punctuation">.</span></span><span class="token class-name">MessageModel</span><span class="token punctuation">;</span><span class="token comment">/** * 批量消息-消费者 * @author A.co * @date 2023/3/19 11:58 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建消费者</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"batch_consumer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置为广播模式</span>        consumer<span class="token punctuation">.</span><span class="token function">setMessageModel</span><span class="token punctuation">(</span><span class="token class-name">MessageModel</span><span class="token punctuation">.</span>BROADCASTING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"BatchTest"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建监听器</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>msgs<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//打印信息</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收信息："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动消费者</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已启动......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、过滤消息"><a href="#6、过滤消息" class="headerlink" title="6、过滤消息"></a>6、过滤消息</h2><p>在大多数情况下，标签是一种简单而有用的设计，可以用来选择您想要的消息。</p><h3 id="6-1、TAG过滤"><a href="#6-1、TAG过滤" class="headerlink" title="6.1、TAG过滤"></a>6.1、TAG过滤</h3><h4 id="6-1-1、生产者"><a href="#6-1-1、生产者" class="headerlink" title="6.1.1、生产者"></a>6.1.1、生产者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RemotingHelper</span><span class="token punctuation">;</span><span class="token comment">/** * 过滤消息-tag过滤-生产者 * @author A.co * @date 2023/3/19 14:48 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TagFilterProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"tag_producer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送消息</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"TagA"</span><span class="token punctuation">,</span><span class="token string">"TagB"</span><span class="token punctuation">,</span><span class="token string">"TagC"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"tagFilterTopic"</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello World "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//关闭生产者</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-2、消费者"><a href="#6-1-2、消费者" class="headerlink" title="6.1.2、消费者"></a>6.1.2、消费者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 过滤消息-tag过滤-消费者 * @author A.co * @date 2023/3/19 14:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TagFilterConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建消费者</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"tag_consumer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"tagFilterTopic"</span><span class="token punctuation">,</span><span class="token string">"TagA || TagC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建监听器</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//消费消息</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收消息："</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动消费者</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已启动......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>消费者将受到包含TAGA或TAGB或TAGC的消息。但是限制是一条消息只能有一个标签，这可能不适用于复杂的场景。在这种情况下，您可以使用SQL表达式来过滤掉消息。</strong></p></blockquote><h3 id="6-2、SQL过滤"><a href="#6-2、SQL过滤" class="headerlink" title="6.2、SQL过滤"></a>6.2、SQL过滤</h3><blockquote><p><strong>SQL功能可以通过您在发送消息时输入的属性进行一些计算。在RocketMQ定义的语法下，可以实现一些有趣的逻辑。</strong></p></blockquote><h4 id="6-2-1、语法"><a href="#6-2-1、语法" class="headerlink" title="6.2.1、语法"></a>6.2.1、语法</h4><h5 id="6-2-1-1、RocketMQ只定义了一些基本的语法来支持这个特性，也可以轻松扩展它。"><a href="#6-2-1-1、RocketMQ只定义了一些基本的语法来支持这个特性，也可以轻松扩展它。" class="headerlink" title="6.2.1.1、RocketMQ只定义了一些基本的语法来支持这个特性，也可以轻松扩展它。"></a>6.2.1.1、RocketMQ只定义了一些基本的语法来支持这个特性，也可以轻松扩展它。</h5><blockquote><ol><li>数值比较，如 <code>&gt;</code>， <code>&gt;=</code>， <code>&lt;</code>， <code>&lt;=</code>， <code>BETWEEN</code>， <code>=</code>;</li><li>字符比较，如 <code>=</code>， <code>&lt;&gt;</code>， <code>IN</code></li><li><code>IS NULL</code> 或 <code>IS NOT NULL</code>;</li><li>逻辑 <code>AND</code>，  <code>OR</code>，  <code>NOT</code>;</li></ol></blockquote><h5 id="6-2-1-2、常见类型有："><a href="#6-2-1-2、常见类型有：" class="headerlink" title="6.2.1.2、常见类型有："></a>6.2.1.2、常见类型有：</h5><blockquote><ol><li>数字，如123、3.1415；</li><li>字符，如 ‘abc’，必须用单引号；</li><li><code>NULL</code>，特殊常数；</li><li>布尔值，<code>TRUE</code>或<code>FALSE</code>；</li></ol></blockquote><p>:::danger<br><strong>使用注意：只有推模式的消费者可以使用SQL过滤。拉模式是用不了的。</strong><br>:::</p><h4 id="6-2-2、生产者"><a href="#6-2-2、生产者" class="headerlink" title="6.2.2、生产者"></a>6.2.2、生产者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">SendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RemotingHelper</span><span class="token punctuation">;</span><span class="token comment">/** * 过滤消息-sql过滤-生产者 * @author A.co * @date 2023/3/19 14:57 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlFilterProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建生产者</span>        <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"sql_producer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送消息</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"TagA"</span><span class="token punctuation">,</span><span class="token string">"TagB"</span><span class="token punctuation">,</span><span class="token string">"TagC"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"sqlFilterTopic"</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello World "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//添加属性</span>            message<span class="token punctuation">.</span><span class="token function">putUserProperty</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//关闭生产者</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-3、消费者"><a href="#6-2-3、消费者" class="headerlink" title="6.2.3、消费者"></a>6.2.3、消费者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">MessageSelector</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 过滤消息-sql过滤-消费者 * @author A.co * @date 2023/3/19 15:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlFilterConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建消费者</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"sql_consumer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅主题,需要在broker.conf添加enablePropertyFilter=true 支持sql过滤</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"sqlFilterTopic"</span><span class="token punctuation">,</span> <span class="token class-name">MessageSelector</span><span class="token punctuation">.</span><span class="token function">bySql</span><span class="token punctuation">(</span><span class="token string">"TAGS is not null and TAGS in ('TagA','TagB') and a between 0 and 3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建监听器</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> consumeConcurrentlyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//消费消息</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收消息："</span>  <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动消费者</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者已启动......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:::danger<br><strong>注意：SQL过滤需broker开启SQL过滤配置（enablePropertyFilter=true ），否则消费者会消费不了。</strong><br>:::</p><h4 id="6-2-4、场景示例"><a href="#6-2-4、场景示例" class="headerlink" title="6.2.4、场景示例"></a>6.2.4、<strong>场景示例</strong></h4><p><strong>以下图电商交易场景为例，从客户下单到收到商品这一过程会生产一系列消息，按照类型将消息分为订单消息和物流消息，其中给物流消息定义地域属性，按照地域分为杭州和上海：</strong></p><ul><li><strong>订单消息</strong></li><li><strong>物流消息</strong><ul><li><strong>物流消息且地域为杭州</strong></li><li><strong>物流消息且地域为上海</strong></li></ul></li></ul><p><strong>这些消息会发送到名称为Trade_Topic的Topic中，被各个不同的系统所订阅：</strong></p><ul><li><strong>物流系统1：只需订阅物流消息且消息地域为杭州。</strong></li><li><strong>物流系统2：只需订阅物流消息且消息地域为杭州或上海。</strong></li><li><strong>订单跟踪系统：只需订阅订单消息。</strong></li><li><strong>实时计算系统：需要订阅所有和交易相关的消息。</strong></li></ul><p><strong>过滤效果如下图所示：</strong><br><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1679232516739-9c628cdf-d64b-4d8a-89fa-612a26a06d46.png#averageHue=%23d2cbc3&amp;clientId=uf0330148-c413-4&amp;from=ui&amp;id=ud9204c08&amp;originHeight=1252&amp;originWidth=1977&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=227418&amp;status=done&amp;style=none&amp;taskId=ue0c3194b-5096-4e56-9345-189f7aa7e01&amp;title=" alt="SQL过滤电商场景图.png"></p><h2 id="7、事务消息"><a href="#7、事务消息" class="headerlink" title="7、事务消息"></a>7、事务消息</h2><h3 id="7-1、事务消息的定义"><a href="#7-1、事务消息的定义" class="headerlink" title="7.1、事务消息的定义"></a>7.1、事务消息的定义</h3><p>它可以被认为是一个两阶段的提交消息实现，以确保分布式系统的最终一致性。事务性消息确保本地事务的执行和消息的发送可以原子地执行。<br>事务消息有三种状态：<br>a. TransactionState.COMMIT_MESSAGE：提交事务，表示允许<strong>消费者</strong>消费该消息。<br>b. TransactionState.ROLLBACK_MESSAGE：回滚事务，表示消息将被<strong>删除</strong>，不允许消费。<br>c.  TransactionState.UNKNOW：中间状态，表示需要MQ<strong>回查</strong>才能确定状态。</p><h3 id="7-2、事务消息的实现流程"><a href="#7-2、事务消息的实现流程" class="headerlink" title="7.2、事务消息的实现流程"></a>7.2、事务消息的实现流程</h3><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1679234131204-0c56b0ed-dcb9-467c-a27c-863e8615c6f3.png#averageHue=%231a1a1a&amp;clientId=uf0330148-c413-4&amp;from=ui&amp;id=ua085fb00&amp;originHeight=1691&amp;originWidth=1292&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=true&amp;size=118232&amp;status=done&amp;style=stroke&amp;taskId=u78beb3a0-5de5-44d3-a058-885e662a016&amp;title=%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF%E6%B5%81%E7%A8%8B%E5%9B%BE" alt="事务消息流程图" title="事务消息流程图"></p><h3 id="7-3、生产者"><a href="#7-3、生产者" class="headerlink" title="7.3、生产者"></a>7.3、生产者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>transaction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">TransactionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">TransactionMQProducer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">TransactionSendResult</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">RemotingHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 事务消息-生产者 * @author A.co * @date 2023/3/19 20:41 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建事务实现</span>        <span class="token class-name">TransactionListener</span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionListenerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建事务生产者</span>        <span class="token class-name">TransactionMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionMQProducer</span><span class="token punctuation">(</span><span class="token string">"transaction_producer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建线程池</span>        <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10000L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"transaction-producer-thread-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> thread<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置线程池</span>        producer<span class="token punctuation">.</span><span class="token function">setExecutorService</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置事务监听实现</span>        producer<span class="token punctuation">.</span><span class="token function">setTransactionListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动生产者</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义tag列表</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"TagA"</span><span class="token punctuation">,</span><span class="token string">"TagB"</span><span class="token punctuation">,</span><span class="token string">"TagC"</span><span class="token punctuation">,</span><span class="token string">"TagD"</span><span class="token punctuation">,</span><span class="token string">"TagE"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//发送事务消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"transactionTopicTest"</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"KEY"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello World "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">RemotingHelper</span><span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TransactionSendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4、本地事务处理监听器-TransactionListener"><a href="#7-4、本地事务处理监听器-TransactionListener" class="headerlink" title="7.4、本地事务处理监听器-TransactionListener"></a>7.4、本地事务处理监听器-TransactionListener</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>transaction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">LocalTransactionState</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">TransactionListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">Message</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token comment">/** * 事务监听器实现 * @author A.co * @date 2023/3/19 20:42 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TransactionListener</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 执行本地事务     * @param message     * @param o     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">LocalTransactionState</span> <span class="token function">executeLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> tags <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span><span class="token string">"TagA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>COMMIT_MESSAGE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span><span class="token string">"TagB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>ROLLBACK_MESSAGE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>UNKNOW<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 回查本地事务-当执行的本地事务返回值是 UNKNOW 时，会执行此方法。若还是 UNKNOW 则会重复回查，一直到回查15次，RocketMq会把此消息给丢弃掉     * @param messageExt     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">LocalTransactionState</span> <span class="token function">checkLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">MessageExt</span> messageExt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> tags <span class="token operator">=</span> messageExt<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span><span class="token string">"TagC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>COMMIT_MESSAGE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span><span class="token string">"TagD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>ROLLBACK_MESSAGE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">LocalTransactionState</span><span class="token punctuation">.</span>UNKNOW<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5、消费者"><a href="#7-5、消费者" class="headerlink" title="7.5、消费者"></a>7.5、消费者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>transaction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>producer<span class="token punctuation">.</span></span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span></span><span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>message<span class="token punctuation">.</span></span><span class="token class-name">MessageExt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 事务消息-消费者 * @author A.co * @date 2023/3/19 21:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//创建消费者</span>        <span class="token class-name">DefaultMQPushConsumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"transaction_consumer_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//指定namesrv地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token class-name">RocketMqConstant</span><span class="token punctuation">.</span>NAME_SERVICE_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//订阅主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"transactionTopicTest"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建监听器</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">ConsumeConcurrentlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeConcurrentlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//消费消息</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接受消息："</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token class-name">ConsumeConcurrentlyStatus</span><span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6、使用限制"><a href="#7-6、使用限制" class="headerlink" title="7.6、使用限制"></a>7.6、使用限制</h3><ul><li>事务性消息没有调度和批处理支持。</li><li>为避免单条消息被检查次数过多，导致半队列消息堆积，我们默认将单条消息的检查次数限制为15次，但用户可以通过更改<strong>“transactionCheckMax”</strong>来更改此限制参数在broker的配置中，如果一条消息的检查次数超过<strong>“transactionCheckMax”</strong>次，broker默认会丢弃这条消息，同时打印错误日志。用户可以通过重写<strong>“AbstractTransactionCheckListener”</strong>类来改变这种行为。</li><li>事务消息将在一定时间后检查，该时间由代理配置中的参数<strong>“transactionTimeout”</strong>确定。并且用户也可以在发送事务消息时通过设置用户属性<strong>“CHECK_IMMUNITY_TIME_IN_SECONDS”</strong>来改变这个限制，这个参数优先于<strong>“transactionMsgTimeout”</strong>参数。</li><li>一个事务性消息可能会被检查或消费不止一次。</li><li>提交给用户目标主题的消息reput可能会失败。目前，它取决于日志记录。高可用是由RocketMQ本身的高可用机制来保证的。如果要保证事务消息不丢失，保证事务完整性，推荐使用同步双写机制。</li><li>事务性消息的生产者ID不能与其它类型的生产者ID共享。与其它类型的消息不同，事务性消息允许向后查询。MQ服务器通过其生产者ID查询客户端。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMq部署</title>
      <link href="posts/e719f2c4.html"/>
      <url>posts/e719f2c4.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、技术架构"><a href="#一、技术架构" class="headerlink" title="一、技术架构"></a>一、技术架构</h1><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1678095151419-173f69d3-d206-4a0d-b380-6fac20d91873.png#averageHue=%23f8f8f7&amp;clientId=u9f9faaf0-4b82-4&amp;from=ui&amp;id=ud3d6ded5&amp;originHeight=536&amp;originWidth=1249&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=127786&amp;status=done&amp;style=none&amp;taskId=u71921897-76c1-446a-befc-ef1e39a70b4&amp;title=" alt="RocketMq架构图.png"><br>RocketMQ架构上主要分为四部分，如上图所示:</p><blockquote><ul><li>Producer：消息发布的⻆⾊，⽀持分布式集群⽅式部署。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进⾏消息投递，投递的过程⽀持快速失败并且低延迟。</li><li>Consumer：消息消费的⻆⾊，⽀持分布式集群⽅式部署。⽀持以push推，pull 拉两种模式对消息进⾏消费。同时也⽀持集群⽅式和⼴播⽅式的消费，它提供实时消息订阅机制，可以满⾜⼤多数⽤户的需求。</li><li>NameServer：NameServer是⼀个⾮常简单的Topic路由注册中⼼，其⻆⾊类似Dubbo中的zookeeper，⽀持Broker的动态注册与发现。主要包括两个功能：</li><li>Broker管理，NameServer接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供⼼跳检测机制，检查Broker是否还存活；路由信息管理，每个NameServer将保存关于Broker集群的整个路由信息和⽤于客户端查询的队列信息。然后Producer和Conumser通过NameServer就可以知道整个Broker 集群的路由信息，从⽽进⾏消息的投递和消费。NameServer通常也是集群的⽅式部署，各实例间相互不进⾏信息通讯。Broker是向每⼀台NameServer注册⾃⼰的路由信息，所以每⼀个NameServer实例上⾯都保存⼀份完整的路由信息。当某个NameServer因某种原因下线了，Broker仍然可以向其它NameServer同步其路由信息，Producer,Consumer仍然可以动态感知Broker的路由的信息。</li><li>BrokerServer：Broker主要负责消息的存储、投递和查询以及服务⾼可⽤保证，为了实现这些功能，Broker包含了以下⼏个重要⼦模块。<ul><li>Remoting Module：整个Broker的实体，负责处理来⾃clients端的请求。</li><li>Client Manager：负责管理客户端(Producer/Consumer)和维护Consumer的</li><li>Topic订阅信息</li><li>Store Service：提供⽅便简单的API接⼝处理消息存储到物理硬盘和查询功</li><li>能。</li><li>HA Service：⾼可⽤服务，提供Master Broker 和 Slave Broker之间的数据同步功能。</li><li>Index Service：根据特定的Message key对投递到Broker的消息进⾏索引服</li><li>务，以提供消息的快速查询。</li></ul></li></ul></blockquote><h2 id="1、RocketMQ的部署架构"><a href="#1、RocketMQ的部署架构" class="headerlink" title="1、RocketMQ的部署架构"></a>1、RocketMQ的部署架构</h2><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26027919/1678095545203-4f520324-fe7e-4d01-ad81-ffd788f59a55.png#averageHue=%23f5f5f5&amp;clientId=u9f9faaf0-4b82-4&amp;from=ui&amp;id=u30be8f9a&amp;originHeight=570&amp;originWidth=1249&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=96654&amp;status=done&amp;style=none&amp;taskId=u7326fd3a-2782-497a-88e5-3f98f991b42&amp;title=" alt="RocketMq部署架构.png"></p><h2 id="2、RocketMQ-⽹络部署特点"><a href="#2、RocketMQ-⽹络部署特点" class="headerlink" title="2、RocketMQ ⽹络部署特点"></a><strong>2、RocketMQ ⽹络部署特点</strong></h2><blockquote><ul><li>NameServer是⼀个⼏乎⽆状态节点，可集群部署，节点之间⽆任何信息同步。</li><li>Broker部署相对复杂，Broker分为Master与Slave，⼀个Master可以对应多个</li><li>Slave，但是⼀个Slave只能对应⼀个Master，Master与Slave 的对应关系通过指定相同的BrokerName，不同的BrokerId 来定义，BrokerId为0表示Master，⾮0表示Slave。Master也可以部署多个。每个Broker与NameServer集群中的所有节点建⽴⻓连接，定时注册Topic信息到所有NameServer。注意：当前RocketMQ版本在部署架构上⽀持⼀Master多Slave，但只有BrokerId=1的从服务器才会参与消息的读负载。</li><li>Producer与NameServer集群中的其中⼀个节点（随机选择）建⽴⻓连接，定期从NameServer获取Topic路由信息，并向提供Topic 服务的Master建⽴⻓连接，且定时向Master发送⼼跳。Producer完全⽆状态，可集群部署。</li><li>Consumer与NameServer集群中的其中⼀个节点（随机选择）建⽴⻓连接，定期从NameServer获取Topic路由信息，并向提供Topic服务的Master、Slave建⽴⻓连接，且定时向Master、Slave发送⼼跳。Consumer既可以从Master订阅消息，也可以从Slave订阅消息，消费者在向Master拉取消息时，Master服务器会根据拉取偏移量与最⼤偏移量的距离（判断是否读⽼消息，产⽣读I/O），以及从服务器是否可读等因素建议下⼀次是从Master还是Slave拉取。</li></ul></blockquote><h2 id="3、结合部署架构图，描述集群⼯作流程："><a href="#3、结合部署架构图，描述集群⼯作流程：" class="headerlink" title="3、结合部署架构图，描述集群⼯作流程："></a><strong>3、结合部署架构图，描述集群⼯作流程：</strong></h2><blockquote><ul><li>启动NameServer，NameServer起来后监听端⼝，等待Broker、Producer、Consumer连上来，相当于⼀个路由控制中⼼。</li><li>Broker启动，跟所有的NameServer保持⻓连接，定时发送⼼跳包。⼼跳包中包含当前Broker信息(IP+端⼝等)以及存储所有Topic信息。注册成功后，</li><li>NameServer集群中就有Topic跟Broker的映射关系。</li><li>收发消息前，先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker 上，也可以在发送消息时⾃动创建Topic。</li><li>Producer发送消息，启动时先跟NameServer集群中的其中⼀台建⽴⻓连接，并从NameServer中获取当前发送的Topic存在哪些Broker上，轮询从队列列表中选择⼀个队列，然后与队列所在的Broker建⽴⻓连接从⽽向Broker发消息。</li><li>Consumer跟Producer类似，跟其中⼀台NameServer建⽴⻓连接，获取当前订阅Topic存在哪些Broker上，然后直接跟Broker建⽴连接通道，开始消费消息。</li></ul></blockquote><h1 id="二、Docker构建RocketMQ"><a href="#二、Docker构建RocketMQ" class="headerlink" title="二、Docker构建RocketMQ"></a>二、Docker构建RocketMQ</h1><h2 id="1、创建NameServer服务"><a href="#1、创建NameServer服务" class="headerlink" title="1、创建NameServer服务"></a>1、创建NameServer服务</h2><h3 id="1-1、拉取镜像"><a href="#1-1、拉取镜像" class="headerlink" title="1.1、拉取镜像"></a>1.1、拉取镜像</h3><blockquote><p>docker pull rocketmqinc/rocketmq</p></blockquote><blockquote><p>注意：如果出现remote error: tls: handshake failure的错误则可能是网络对镜像地址给拦截了。可对docker版本降到18或者用其它网络试试，也可以改成用公司内网的镜像仓库进行拉取。<br>与spring cloud alibaba版本对应的说明。</p></blockquote><h3 id="1-2、创建nameserver数据存储路径"><a href="#1-2、创建nameserver数据存储路径" class="headerlink" title="1.2、创建nameserver数据存储路径"></a>1.2、创建nameserver数据存储路径</h3><blockquote><p>mkdir -p  /自定义的路径/rocketmq/data/namesrv/logs   /自定义的路径/rocketmq/data/namesrv/store</p></blockquote><h3 id="1-3、构建nameserver容器"><a href="#1-3、构建nameserver容器" class="headerlink" title="1.3、构建nameserver容器"></a>1.3、构建nameserver容器</h3><blockquote><p>docker run -d <br>–restart=always <br>–name rmqnamesrv <br>-p 9876:9876 <br>-v /自定义路径/rocketmq/data/namesrv/logs:/root/logs <br>-v /自定义路径/rocketmq/data/namesrv/store:/root/store <br>-e “MAX_POSSIBLE_HEAP=100000000” <br>rocketmqinc/rocketmq <br>sh mqnamesrv </p></blockquote><p>| ### <strong>参数</strong><br> | ### <strong>说明</strong><br> |<br>| — | — |<br>| -d | 以守护进程的方式启动 |<br>| –restart=always | docker重启时候容器自动重启 |<br>| –name rmqnamesrv | 把容器的名字设置为rmqnamesrv |<br>| -p |  把容器内的端口9876挂载到宿主机9876上面 |<br>| -v /自定义路径/rocketmq/data/namesrv/logs:/root/logs | 把容器内的/root/logs日志目录挂载到宿主机的 /自定义路径/rocketmq/data/namesrv/logs目录 |<br>| -v /自定义路径/rocketmq/data/namesrv/store:/root/store | 把容器内的/root/store数据存储目录挂载到宿主机的 /自定义路径/rocketmq/data/namesrv目录 |<br>| -e “MAX_POSSIBLE_HEAP=100000000” | 设置容器的最大堆内存为100000000 |<br>| rocketmqinc/rocketmq | 使用的镜像名称 |<br>| sh mqnamesrv  | 启动namesrv服务 |</p><h2 id="2、创建broker节点"><a href="#2、创建broker节点" class="headerlink" title="2、创建broker节点"></a>2、创建broker节点</h2><h3 id="2-1、创建broker数据存储路径"><a href="#2-1、创建broker数据存储路径" class="headerlink" title="2.1、创建broker数据存储路径"></a>2.1、创建broker数据存储路径</h3><blockquote><p>mkdir -p  /自定义路径/rocketmq/data/broker/logs   /自定义路径/rocketmq/data/broker/store /自定义路径/rocketmq/conf</p></blockquote><h3 id="2-2、创建配置文件"><a href="#2-2、创建配置文件" class="headerlink" title="2.2、创建配置文件"></a>2.2、创建配置文件</h3><blockquote><p>vim /自定义路径/rocketmq/conf/broker.conf</p><h1 id="所属集群名称，如果节点较多可以配置多个"><a href="#所属集群名称，如果节点较多可以配置多个" class="headerlink" title="所属集群名称，如果节点较多可以配置多个"></a>所属集群名称，如果节点较多可以配置多个</h1><p>brokerClusterName = DefaultCluster<br>#broker名称，master和slave使用相同的名称，表明他们的主从关系<br>brokerName = broker-a<br>#0表示Master，大于0表示不同的slave<br>brokerId = 0<br>#表示几点做消息删除动作，默认是凌晨4点<br>deleteWhen = 04<br>#在磁盘上保留消息的时长，单位是小时<br>fileReservedTime = 48<br>#有三个值：SYNC_MASTER，ASYNC_MASTER，SLAVE；同步和异步表示Master和Slave之间同步数据的机制；<br>brokerRole = ASYNC_MASTER<br>#刷盘策略，取值为：ASYNC_FLUSH，SYNC_FLUSH表示同步刷盘和异步刷盘；SYNC_FLUSH消息写入磁盘后才返回成功状态，ASYNC_FLUSH不需要；<br>flushDiskType = ASYNC_FLUSH</p><h1 id="设置broker节点所在服务器的ip地址"><a href="#设置broker节点所在服务器的ip地址" class="headerlink" title="设置broker节点所在服务器的ip地址"></a>设置broker节点所在服务器的ip地址</h1><p>brokerIP1 = 192.168.52.136</p><h1 id="磁盘使用达到95-之后-生产者再写入消息会报错-CODE-14-DESC-service-not-available-now-maybe-disk-full"><a href="#磁盘使用达到95-之后-生产者再写入消息会报错-CODE-14-DESC-service-not-available-now-maybe-disk-full" class="headerlink" title="磁盘使用达到95%之后,生产者再写入消息会报错 CODE: 14 DESC: service not available now, maybe disk full"></a>磁盘使用达到95%之后,生产者再写入消息会报错 CODE: 14 DESC: service not available now, maybe disk full</h1><p>diskMaxUsedSpaceRatio=95</p><h1 id="支持sql过滤"><a href="#支持sql过滤" class="headerlink" title="支持sql过滤"></a>支持sql过滤</h1><p>enablePropertyFilter=true</p></blockquote><h3 id="2-3、构建broker容器"><a href="#2-3、构建broker容器" class="headerlink" title="2.3、构建broker容器"></a>2.3、构建broker容器</h3><blockquote><p>docker run -d  <br>–restart=always <br>–name rmqbroker <br>–link rmqnamesrv:namesrv <br>-p 10911:10911 <br>-p 10909:10909 <br>-v  /自定义路径/rocketmq/data/broker/logs:/root/logs <br>-v  /自定义路径/rocketmq/data/broker/store:/root/store <br>-v /自定义路径/rocketmq/conf/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf <br>-e “NAMESRV_ADDR=namesrv:9876” <br>-e “MAX_POSSIBLE_HEAP=200000000” <br>rocketmqinc/rocketmq <br>sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf</p></blockquote><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-d</td><td>以守护进程的方式启动</td></tr><tr><td>–restart=always</td><td>docker重启时候镜像自动重启</td></tr><tr><td>–name rmqbroker</td><td>把容器的名字设置为rmqbroker</td></tr><tr><td>–link rmqnamesrv:namesrv</td><td>和rmqnamesrv容器通信</td></tr><tr><td>-p 10911:10911</td><td>把容器的非vip通道端口挂载到宿主机</td></tr><tr><td>-p 10909:10909</td><td>把容器的vip通道端口挂载到宿主机</td></tr><tr><td>-v  /自定义路径/rocketmq/data/broker/logs:/root/logs</td><td></td></tr><tr><td>-v  /自定义路径/rocketmq/data/broker/store:/root/store</td><td></td></tr><tr><td>-v /自定义路径/rocketmq/conf/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf</td><td></td></tr><tr><td>-e “NAMESRV_ADDR=namesrv:9876”</td><td>指定namesrv的地址为本机namesrv的ip地址:9876</td></tr><tr><td>-e “MAX_POSSIBLE_HEAP=200000000”</td><td>指定broker服务的最大堆内存</td></tr><tr><td>rocketmqinc/rocketmq</td><td>使用的镜像名称</td></tr><tr><td>sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf</td><td>指定配置文件启动broker节点</td></tr><tr><td>-e “autoCreateTopicEnable=true”</td><td>自动创建topic为true</td></tr></tbody></table><blockquote><p>注意：在运行时报错找不到topic的话，就在创建broker命令里面加-e “autoCreateTopicEnable=true” </p></blockquote><h2 id="3、创建rocketmq-console服务"><a href="#3、创建rocketmq-console服务" class="headerlink" title="3、创建rocketmq-console服务"></a>3、创建rocketmq-console服务</h2><h3 id="3-1、拉取镜像"><a href="#3-1、拉取镜像" class="headerlink" title="3.1、拉取镜像"></a>3.1、拉取镜像</h3><blockquote><p>docker pull styletang/rocketmq-console-ng</p></blockquote><h3 id="3-2、构建rocketmq-console容器"><a href="#3-2、构建rocketmq-console容器" class="headerlink" title="3.2、构建rocketmq-console容器"></a>3.2、构建rocketmq-console容器</h3><blockquote><p>注意：192.168.52.136需要换成nameserver服务的ip地址。</p></blockquote><blockquote><p>docker run -d <br>–restart=always <br>–name rmqadmin <br>-e “JAVA_OPTS=-Drocketmq.namesrv.addr=192.168.52.136:9876 <br>-Dcom.rocketmq.sendMessageWithVIPChannel=false” <br>-p 9999:8080 <br>pangliang/rocketmq-console-ng</p></blockquote><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-d</td><td>以守护进程的方式启动</td></tr><tr><td>–restart=always</td><td>docker重启时候镜像自动重启</td></tr><tr><td>–name rmqadmin</td><td>把容器的名字设置为rmqadmin</td></tr><tr><td>-e “JAVA_OPTS=-Drocketmq.namesrv.addr=192.168.52.136:9876</td><td>设置namesrv服务的ip地址</td></tr><tr><td>-Dcom.rocketmq.sendMessageWithVIPChannel=false”</td><td>不使用vip通道发送消息</td></tr><tr><td>-p 9999:8080</td><td>把容器内的端口8080挂载到宿主机上的9999端口</td></tr><tr><td>pangliang/rocketmq-console-ng</td><td>使用构建的镜像名称</td></tr></tbody></table><h1 id="三、Docker-Compose部署RocketMQ"><a href="#三、Docker-Compose部署RocketMQ" class="headerlink" title="三、Docker-Compose部署RocketMQ"></a>三、Docker-Compose部署RocketMQ</h1><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">rocketmq-namesrv</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rocketmqinc/rocketmq    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rocketmq<span class="token punctuation">-</span>namesrv    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9876<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/rocketmq/data/namesrv/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> /data/rocketmq/data/namesrv/store<span class="token punctuation">:</span>/root/store    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MAX_POSSIBLE_HEAP</span><span class="token punctuation">:</span> <span class="token number">100000000</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token string">"mqnamesrv"</span><span class="token punctuation">]</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">rocketmq_net</span><span class="token punctuation">:</span>        <span class="token key atrule">aliases</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> rocketmq<span class="token punctuation">-</span>namesrv  <span class="token key atrule">rocketmq-broker</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rocketmqinc/rocketmq    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rocketmq<span class="token punctuation">-</span>broker    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10909<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10911<span class="token punctuation">:</span><span class="token number">10911</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/rocketmq/data/broker/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> /data/rocketmq/data/broker/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> /data/rocketmq/conf/broker.conf<span class="token punctuation">:</span>/opt/rocketmq<span class="token punctuation">-</span>4.4.0/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">NAMESRV_ADDR</span><span class="token punctuation">:</span> <span class="token string">"namesrv:9876"</span>      <span class="token key atrule">MAX_POSSIBLE_HEAP</span><span class="token punctuation">:</span> <span class="token number">200000000</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sh"</span><span class="token punctuation">,</span><span class="token string">"mqbroker"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"/opt/rocketmq-4.4.0/conf/broker.conf"</span><span class="token punctuation">,</span><span class="token string">"-n"</span><span class="token punctuation">,</span><span class="token string">"rocketmq-namesrv:9876"</span><span class="token punctuation">]</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> rocketmq<span class="token punctuation">-</span>namesrv    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">rocketmq_net</span><span class="token punctuation">:</span>        <span class="token key atrule">aliases</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> rocketmq<span class="token punctuation">-</span>broker  <span class="token key atrule">rocketmq-console</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> styletang/rocketmq<span class="token punctuation">-</span>console<span class="token punctuation">-</span>ng    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rocketmq<span class="token punctuation">-</span>console    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9999<span class="token punctuation">:</span><span class="token number">8080</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">JAVA_OPTS</span><span class="token punctuation">:</span> <span class="token string">"-Drocketmq.namesrv.addr=rocketmq-namesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> rocketmq<span class="token punctuation">-</span>namesrv    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">rocketmq_net</span><span class="token punctuation">:</span>        <span class="token key atrule">aliases</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> rocketmq<span class="token punctuation">-</span>console<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">rocketmq_net</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> rocketmq_net    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-Compose启动命令"><a href="#Docker-Compose启动命令" class="headerlink" title="Docker-Compose启动命令"></a>Docker-Compose启动命令</h2><blockquote><p>docker-compose -f rocketmq-docker-compose.yaml up -d</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMq </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
